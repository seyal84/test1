{"version":3,"file":"AsYouType.js","names":["_metadata","_interopRequireDefault","require","_PhoneNumber","_AsYouTypeState","_AsYouTypeFormatter","_interopRequireWildcard","_AsYouTypeParser","_getCountryByCallingCode","_getCountryByNationalNumber","_isObject","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","Symbol","iterator","constructor","prototype","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","toString","slice","name","Array","from","test","length","l","u","next","done","push","value","isArray","_classCallCheck","_defineProperties","enumerable","configurable","writable","_toPropertyKey","key","_createClass","_toPrimitive","toPrimitive","String","Number","USE_NON_GEOGRAPHIC_COUNTRY_CODE","AsYouType","exports","optionsOrDefaultCountry","metadata","Metadata","_this$getCountryAndCa","getCountryAndCallingCode","_this$getCountryAndCa2","defaultCountry","defaultCallingCode","reset","isObject","hasCountry","undefined","isNonGeographicCallingCode","input","text","_this$parser$input","parser","state","digits","justLeadingPlus","formattedOutput","determineTheCountryIfNeeded","nationalSignificantNumber","formatter","narrowDownMatchingFormats","formattedNationalNumber","hasSelectedNumberingPlan","format","reExtractNationalSignificantNumber","nationalDigits","getNationalDigits","getFullNumber","getNonFormattedNumber","_this","AsYouTypeState","onCountryChange","country","onCallingCodeChange","callingCode","selectNumberingPlan","numberingPlan","AsYouTypeFormatter","AsYouTypeParser","onNationalSignificantNumberChange","isInternational","international","getCallingCode","getCountryCallingCode","getCountry","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","_this2","prefix","getInternationalPrefixBeforeCountryCallingCode","spacing","concat","getDigitsWithoutInternationalPrefix","getNonFormattedNationalNumberWithPrefix","_this$state","complexPrefixBeforeNationalSignificantNumber","nationalPrefix","number","nationalSignificantNumberMatchesInput","getNonFormattedTemplate","replace","DIGIT_PLACEHOLDER","countryCodes","getCountryCodesForCallingCode","setCountry","getCountryByCallingCode","nationalNumber","getNumberValue","_this$state2","callingCode_","countryCallingCode","getNumber","_this$state3","carrierCode","ambiguousCountries","exactCountry","getCountryByNationalNumber","countries","phoneNumber","PhoneNumber","isPossible","isValid","getNationalNumber","getChars","getTemplate"],"sources":["../source/AsYouType.js"],"sourcesContent":["import Metadata from './metadata.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport AsYouTypeState from './AsYouTypeState.js'\r\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js'\r\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\nimport getCountryByNationalNumber from './helpers/getCountryByNationalNumber.js'\r\nimport isObject from './helpers/isObject.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\tconst [defaultCountry, defaultCallingCode] = this.getCountryAndCallingCode(optionsOrDefaultCountry)\r\n\t\t// `this.defaultCountry` and `this.defaultCallingCode` aren't required to be in sync.\r\n\t\t// For example, `this.defaultCountry` could be `\"AR\"` and `this.defaultCallingCode` could be `undefined`.\r\n\t\t// So `this.defaultCountry` and `this.defaultCallingCode` are totally independent.\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tgetCountryAndCallingCode(optionsOrDefaultCountry) {\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (isObject(optionsOrDefaultCountry)) {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tdefaultCountry = undefined\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tdefaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [defaultCountry, defaultCallingCode]\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t} = this.parser.input(text, this.state)\r\n\t\tif (justLeadingPlus) {\r\n\t\t\tthis.formattedOutput = '+'\r\n\t\t} else if (digits) {\r\n\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tif (this.state.nationalSignificantNumber) {\r\n\t\t\t\tthis.formatter.narrowDownMatchingFormats(this.state)\r\n\t\t\t}\r\n\t\t\tlet formattedNationalNumber\r\n\t\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\t\tformattedNationalNumber = this.formatter.format(digits, this.state)\r\n\t\t\t}\r\n\t\t\tif (formattedNationalNumber === undefined) {\r\n\t\t\t\t// See if another national (significant) number could be re-extracted.\r\n\t\t\t\tif (this.parser.reExtractNationalSignificantNumber(this.state)) {\r\n\t\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\t\t// If it could, then re-try formatting the new national (significant) number.\r\n\t\t\t\t\tconst nationalDigits = this.state.getNationalDigits()\r\n\t\t\t\t\tif (nationalDigits) {\r\n\t\t\t\t\t\tformattedNationalNumber = this.formatter.format(nationalDigits, this.state)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.formattedOutput = formattedNationalNumber\r\n\t\t\t\t? this.getFullNumber(formattedNationalNumber)\r\n\t\t\t\t: this.getNonFormattedNumber()\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.state = new AsYouTypeState({\r\n\t\t\tonCountryChange: (country) => {\r\n\t\t\t\t// Before version `1.6.0`, the official `AsYouType` formatter API\r\n\t\t\t\t// included the `.country` property of an `AsYouType` instance.\r\n\t\t\t\t// Since that property (along with the others) have been moved to\r\n\t\t\t\t// `this.state`, `this.country` property is emulated for compatibility\r\n\t\t\t\t// with the old versions.\r\n\t\t\t\tthis.country = country\r\n\t\t\t},\r\n\t\t\tonCallingCodeChange: (callingCode, country) => {\r\n\t\t\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t\tthis.parser.reset(this.metadata.numberingPlan)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.formatter = new AsYouTypeFormatter({\r\n\t\t\tstate: this.state,\r\n\t\t\tmetadata: this.metadata\r\n\t\t})\r\n\t\tthis.parser = new AsYouTypeParser({\r\n\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\tdefaultCallingCode: this.defaultCallingCode,\r\n\t\t\tmetadata: this.metadata,\r\n\t\t\tstate: this.state,\r\n\t\t\tonNationalSignificantNumberChange: () => {\r\n\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.state.reset({\r\n\t\t\tcountry: this.defaultCountry,\r\n\t\t\tcallingCode: this.defaultCallingCode\r\n\t\t})\r\n\t\tthis.formattedOutput = ''\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is being input in international format.\r\n\t * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisInternational() {\r\n\t\treturn this.state.international\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the \"calling code\" part of the phone number when it's being input\r\n\t * in an international format.\r\n\t * If no valid calling code has been entered so far, returns `undefined`.\r\n\t * @return {string} [callingCode]\r\n\t */\r\n\tgetCallingCode() {\r\n\t\t // If the number is being input in national format and some \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then `this.state.callingCode`\r\n\t\t // is equal to that \"default calling code\".\r\n\t\t //\r\n\t\t // If the number is being input in national format and no \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then returns `undefined`,\r\n\t\t // even if a \"default country\" has been passed to `AsYouType` constructor.\r\n\t\t //\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn this.state.callingCode\r\n\t\t}\r\n\t}\r\n\r\n\t// A legacy alias.\r\n\tgetCountryCallingCode() {\r\n\t\treturn this.getCallingCode()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * Returns `undefined` if no phone number has been input yet.\r\n\t * @return {string} [country]\r\n\t */\r\n\tgetCountry() {\r\n\t\tconst { digits } = this.state\r\n\t\t// Return `undefined` if no digits have been input yet.\r\n\t\tif (digits) {\r\n\t\t\treturn this._getCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * @return {string} [country]\r\n\t */\r\n\t_getCountry() {\r\n\t\tconst { country } = this.state\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t// `AsYouType.getCountry()` returns `undefined`\r\n\t\t\t// for \"non-geographic\" phone numbering plans.\r\n\t\t\tif (country === '001') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn country\r\n\t}\r\n\r\n\tdetermineTheCountryIfNeeded() {\r\n\t\t// Suppose a user enters a phone number in international format,\r\n\t\t// and there're several countries corresponding to that country calling code,\r\n\t\t// and a country has been derived from the number, and then\r\n\t\t// a user enters one more digit and the number is no longer\r\n\t\t// valid for the derived country, so the country should be re-derived\r\n\t\t// on every new digit in those cases.\r\n\t\t//\r\n\t\t// If the phone number is being input in national format,\r\n\t\t// then it could be a case when `defaultCountry` wasn't specified\r\n\t\t// when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\r\n\t\t// and that \"calling code\" could correspond to a \"non-geographic entity\",\r\n\t\t// or there could be several countries corresponding to that country calling code.\r\n\t\t// In those cases, `this.country` is `undefined` and should be derived\r\n\t\t// from the number. Again, if country calling code is ambiguous, then\r\n\t\t// `this.country` should be re-derived with each new digit.\r\n\t\t//\r\n\t\tif (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\tthis.determineTheCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tconst prefix = (text) => this.formatter.getInternationalPrefixBeforeCountryCallingCode(this.state, {\r\n\t\t\t\tspacing: text ? true : false\r\n\t\t\t}) + text\r\n\t\t\tconst { callingCode } = this.state\r\n\t\t\tif (!callingCode) {\r\n\t\t\t\treturn prefix(`${this.state.getDigitsWithoutInternationalPrefix()}`)\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn prefix(callingCode)\r\n\t\t\t}\r\n\t\t\treturn prefix(`${callingCode} ${formattedNationalNumber}`)\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumberWithPrefix() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber,\r\n\t\t\tnationalPrefix\r\n\t\t} = this.state\r\n\t\tlet number = nationalSignificantNumber\r\n\t\tconst prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix\r\n\t\tif (prefix) {\r\n\t\t\tnumber = prefix + number\r\n\t\t}\r\n\t\treturn number\r\n\t}\r\n\r\n\tgetNonFormattedNumber() {\r\n\t\tconst { nationalSignificantNumberMatchesInput } = this.state\r\n\t\treturn this.getFullNumber(\r\n\t\t\tnationalSignificantNumberMatchesInput\r\n\t\t\t\t? this.getNonFormattedNationalNumberWithPrefix()\r\n\t\t\t\t: this.state.getNationalDigits()\r\n\t\t)\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\tconst number = this.getNonFormattedNumber()\r\n\t\tif (number) {\r\n\t\t\treturn number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\t}\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst { callingCode } = this.state\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.state.setCountry(getCountryByCallingCode(\r\n\t\t\tthis.isInternational() ? this.state.callingCode : this.defaultCallingCode,\r\n\t\t\t{\r\n\t\t\t\tnationalNumber: this.state.nationalSignificantNumber,\r\n\t\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\t\tmetadata: this.metadata\r\n\t\t\t}\r\n\t\t))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a E.164 phone number value for the user's input.\r\n\t *\r\n\t * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n\t * it will return `\"+12223334444\"`.\r\n\t *\r\n\t * For international phone number input, it will also auto-correct\r\n\t * some minor errors such as using a national prefix when writing\r\n\t * an international phone number. For example, if the user inputs\r\n\t * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n\t * `\"+447400000000\"` phone number value.\r\n\t *\r\n\t * Will return `undefined` if no digits have been input,\r\n\t * or when inputting a phone number in national format and no\r\n\t * default country or default \"country calling code\" have been set.\r\n\t *\r\n\t * @return {string} [value]\r\n\t */\r\n\tgetNumberValue() {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tcallingCode,\r\n\t\t\tcountry,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = this.state\r\n\r\n\t \t// Will return `undefined` if no digits have been input.\r\n\t\tif (!digits) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (callingCode) {\r\n\t\t\t\treturn '+' + callingCode + nationalSignificantNumber\r\n\t\t\t} else {\r\n\t\t\t\treturn '+' + digits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst callingCode_ = country ? this.metadata.countryCallingCode() : callingCode\r\n\t\t\t\treturn '+' + callingCode_ + nationalSignificantNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcarrierCode,\r\n\t\t\tcallingCode\r\n\t\t} = this.state\r\n\r\n\t\t// `this._getCountry()` is basically same as `this.state.country`\r\n\t\t// with the only change that it return `undefined` in case of a\r\n\t\t// \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\r\n\t\tlet country = this._getCountry()\r\n\r\n\t\tif (!nationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `state.country` and `state.callingCode` aren't required to be in sync.\r\n\t\t// For example, `country` could be `\"AR\"` and `callingCode` could be `undefined`.\r\n\t\t// So `country` and `callingCode` are totally independent.\r\n\r\n\t\tif (!country && !callingCode) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// By default, if `defaultCountry` parameter was passed when\r\n\t\t// creating `AsYouType` instance, `state.country` is gonna be\r\n\t\t// that `defaultCountry`, which doesn't entirely conform with\r\n\t\t// `parsePhoneNumber()`'s behavior where it attempts to determine\r\n\t\t// the country more precisely in cases when multiple countries\r\n\t\t// could correspond to the same `countryCallingCode`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/103#note_1417192969\r\n\t\t//\r\n\t\t// Because `AsYouType.getNumber()` method is supposed to be a 1:1\r\n\t\t// equivalent for `parsePhoneNumber(AsYouType.getNumberValue())`,\r\n\t\t// then it should also behave accordingly in cases of `country` ambiguity.\r\n\t\t// That's how users of this library would expect it to behave anyway.\r\n\t\t//\r\n\t\tif (country) {\r\n\t\t\tif (country === this.defaultCountry) {\r\n\t\t\t\t// `state.country` and `state.callingCode` aren't required to be in sync.\r\n\t\t\t\t// For example, `state.country` could be `\"AR\"` and `state.callingCode` could be `undefined`.\r\n\t\t\t\t// So `state.country` and `state.callingCode` are totally independent.\r\n\t\t\t\tconst metadata = new Metadata(this.metadata.metadata)\r\n\t\t\t\tmetadata.selectNumberingPlan(country)\r\n\t\t\t\tconst callingCode = metadata.numberingPlan.callingCode()\r\n\t\t\t\tconst ambiguousCountries = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\t\t\tif (ambiguousCountries.length > 1) {\r\n\t\t\t\t\tconst exactCountry = getCountryByNationalNumber(nationalSignificantNumber, {\r\n\t\t\t\t\t\tcountries: ambiguousCountries,\r\n\t\t\t\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\t\t\t\tmetadata: this.metadata.metadata\r\n\t\t\t\t\t})\r\n\t\t\t\t\tif (exactCountry) {\r\n\t\t\t\t\t\tcountry = exactCountry\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountry || callingCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"possible\".\r\n\t * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisPossible() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isPossible()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"valid\".\r\n\t * Is just a shortcut for `PhoneNumber.isValid()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isValid()\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.state.nationalSignificantNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the phone number characters entered by the user.\r\n\t * @return {string}\r\n\t */\r\n\tgetChars() {\r\n\t\treturn (this.state.international ? '+' : '') + this.state.digits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the template for the formatted phone number.\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplate() {\r\n\t\treturn this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || ''\r\n\t}\r\n}"],"mappings":"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","ignoreList":[]}