{"version":3,"file":"getNumberType.js","names":["_isViablePhoneNumber","_interopRequireDefault","require","_getNumberType2","_isObject","_parse","e","__esModule","_slicedToArray","r","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","length","n","l","Symbol","iterator","i","u","f","o","next","Object","done","push","value","isArray","getNumberType","_normalizeArguments","normalizeArguments","arguments","input","options","metadata","phone","_getNumberType","args","_Array$prototype$slic","prototype","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","isViablePhoneNumber","parse","defaultCountry","undefined"],"sources":["../../source/legacy/getNumberType.js"],"sourcesContent":["import isViablePhoneNumber from '../helpers/isViablePhoneNumber.js'\r\nimport _getNumberType from '../helpers/getNumberType.js'\r\nimport isObject from '../helpers/isObject.js'\r\nimport parse from '../parse.js'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType() {\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\t// `parseNumber()` would return `{}` when no phone number could be parsed from the input.\r\n\tif (!input.phone) {\r\n\t\treturn\r\n\t}\r\n\treturn _getNumberType(input, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet options = {}\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `getNumberType('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If \"default country\" argument is being passed\r\n\t\t// then convert it to an `options` object.\r\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\r\n\t\tif (!isObject(arg_2))\r\n\t\t{\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, { defaultCountry: arg_2 }, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// No \"resrict country\" argument is being passed.\r\n\t\t// International phone number is passed.\r\n\t\t// `getNumberType('+78005553535', metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (arg_3)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_2\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_2\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, undefined, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed phone number.\r\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\r\n\telse if (isObject(arg_1))\r\n\t{\r\n\t\tinput = arg_1\r\n\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}"],"mappings":"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","ignoreList":[]}