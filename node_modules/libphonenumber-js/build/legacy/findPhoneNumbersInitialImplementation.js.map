{"version":3,"file":"findPhoneNumbersInitialImplementation.js","names":["_constants","require","_parse","_interopRequireDefault","_isViablePhoneNumber","_createExtensionPattern","_parsePreCandidate","_isValidPreCandidate","_isValidCandidate","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","a","n","TypeError","_defineProperties","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","_defineProperty","value","i","_toPrimitive","toPrimitive","call","String","Number","EXTN_PATTERNS_FOR_PARSING","exports","createExtensionPattern","WHITESPACE_IN_THE_BEGINNING_PATTERN","RegExp","WHITESPACE","PUNCTUATION_IN_THE_END_PATTERN","VALID_PUNCTUATION","VALID_PRECEDING_CHARACTER_PATTERN","findPhoneNumbers","text","options","metadata","undefined","search","PhoneNumberSearch","phones","hasNext","push","next","searchPhoneNumbers","done","state","regexp","VALID_PHONE_NUMBER_WITH_EXTENSION","find","matches","exec","number","startsAt","index","replace","parsePreCandidate","result","parseCandidate","isValidPreCandidate","isValidCandidate","extended","parse","phone","endsAt","last_match","Error"],"sources":["../../source/legacy/findPhoneNumbersInitialImplementation.js"],"sourcesContent":["// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport {\r\n\tPLUS_CHARS,\r\n\tVALID_PUNCTUATION,\r\n\tVALID_DIGITS,\r\n\tWHITESPACE\r\n} from '../constants.js'\r\n\r\nimport parse from '../parse.js'\r\nimport { VALID_PHONE_NUMBER_WITH_EXTENSION } from '../helpers/isViablePhoneNumber.js'\r\nimport createExtensionPattern from '../helpers/extension/createExtensionPattern.js'\r\n\r\nimport parsePreCandidate from '../findNumbers/parsePreCandidate.js'\r\nimport isValidPreCandidate from '../findNumbers/isValidPreCandidate.js'\r\nimport isValidCandidate from '../findNumbers/isValidCandidate.js'\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nexport const EXTN_PATTERNS_FOR_PARSING = createExtensionPattern('parsing')\r\n\r\nconst WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+')\r\nconst PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$')\r\n\r\n// // Regular expression for getting opening brackets for a valid number\r\n// // found using `PHONE_NUMBER_START_PATTERN` for prepending those brackets to the number.\r\n// const BEFORE_NUMBER_DIGITS_PUNCTUATION = new RegExp('[' + OPENING_BRACKETS + ']+' + '[' + WHITESPACE + ']*' + '$')\r\n\r\nconst VALID_PRECEDING_CHARACTER_PATTERN = /[^a-zA-Z0-9]/\r\n\r\nexport default function findPhoneNumbers(text, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\tconst phones = []\r\n\twhile (search.hasNext()) {\r\n\t\tphones.push(search.next())\r\n\t}\r\n\treturn phones\r\n}\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport function searchPhoneNumbers(text, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\tconst search = new PhoneNumberSearch(text, options, metadata)\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (search.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: search.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\r\nexport class PhoneNumberSearch {\r\n\tconstructor(text, options, metadata) {\r\n\t\tthis.text = text\r\n\t\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t\t// code coverage would decrease for some weird reason.\r\n\t\tthis.options = options || {}\r\n\t\tthis.metadata = metadata\r\n\r\n\t\t// Iteration tristate.\r\n\t\tthis.state = 'NOT_READY'\r\n\r\n\t\tthis.regexp = new RegExp(VALID_PHONE_NUMBER_WITH_EXTENSION, 'ig')\r\n\t}\r\n\r\n\tfind() {\r\n\t\tconst matches = this.regexp.exec(this.text)\r\n\t\tif (!matches) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet number = matches[0]\r\n\t\tlet startsAt = matches.index\r\n\r\n\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '')\r\n\t\tstartsAt += matches[0].length - number.length\r\n\t\t// Fixes not parsing numbers with whitespace in the end.\r\n\t\t// Also fixes not parsing numbers with opening parentheses in the end.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '')\r\n\r\n\t\tnumber = parsePreCandidate(number)\r\n\r\n\t\tconst result = this.parseCandidate(number, startsAt)\r\n\t\tif (result) {\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\t// Tail recursion.\r\n\t\t// Try the next one if this one is not a valid phone number.\r\n\t\treturn this.find()\r\n\t}\r\n\r\n\tparseCandidate(number, startsAt) {\r\n\t\tif (!isValidPreCandidate(number, startsAt, this.text)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Don't parse phone numbers which are non-phone numbers\r\n\t\t// due to being part of something else (e.g. a UUID).\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\r\n\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\r\n\t\tif (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// // Prepend any opening brackets left behind by the\r\n\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\r\n\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\r\n\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\r\n\t\t// if (full_number_starts_at >= 0)\r\n\t\t// {\r\n\t\t// \tnumber   = text_before_number.slice(full_number_starts_at) + number\r\n\t\t// \tstartsAt = full_number_starts_at\r\n\t\t// }\r\n\t\t//\r\n\t\t// this.searching_from = matches.lastIndex\r\n\r\n\t\tconst result = parse(number, this.options, this.metadata)\r\n\t\tif (!result.phone) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tresult.startsAt = startsAt\r\n\t\tresult.endsAt = startsAt + number.length\r\n\t\treturn result\r\n\t}\r\n\r\n\thasNext() {\r\n\t\tif (this.state === 'NOT_READY') {\r\n\t\t\tthis.last_match = this.find()\r\n\t\t\tif (this.last_match) {\r\n\t\t\t\tthis.state = 'READY'\r\n\t\t\t} else {\r\n\t\t\t\tthis.state = 'DONE'\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.state === 'READY'\r\n\t}\r\n\r\n\tnext() {\r\n\t\t// Check the state and find the next match as a side-effect if necessary.\r\n\t\tif (!this.hasNext()) {\r\n\t\t\tthrow new Error('No next element')\r\n\t\t}\r\n\t\t// Don't retain that memory any longer than necessary.\r\n\t\tconst result = this.last_match\r\n\t\tthis.last_match = null\r\n\t\tthis.state = 'NOT_READY'\r\n\t\treturn result\r\n\t}\r\n}"],"mappings":"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","ignoreList":[]}