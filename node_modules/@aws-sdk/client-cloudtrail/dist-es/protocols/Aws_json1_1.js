import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { CloudTrailServiceException as __BaseException } from "../models/CloudTrailServiceException";
import { AccessDeniedException, AccountHasOngoingImportException, AccountNotFoundException, AccountNotRegisteredException, AccountRegisteredException, CannotDelegateManagementAccountException, ChannelAlreadyExistsException, ChannelARNInvalidException, ChannelExistsForEDSException, ChannelMaxLimitExceededException, ChannelNotFoundException, CloudTrailAccessNotEnabledException, CloudTrailARNInvalidException, CloudTrailInvalidClientTokenIdException, CloudWatchLogsDeliveryUnavailableException, ConcurrentModificationException, ConflictException, DelegatedAdminAccountLimitExceededException, EventDataStoreAlreadyExistsException, EventDataStoreARNInvalidException, EventDataStoreFederationEnabledException, EventDataStoreHasOngoingImportException, EventDataStoreMaxLimitExceededException, EventDataStoreNotFoundException, EventDataStoreTerminationProtectedException, GenerateResponseException, ImportNotFoundException, InactiveEventDataStoreException, InactiveQueryException, InsightNotEnabledException, InsufficientDependencyServiceAccessPermissionException, InsufficientEncryptionPolicyException, InsufficientIAMAccessPermissionException, InsufficientS3BucketPolicyException, InsufficientSnsTopicPolicyException, InvalidCloudWatchLogsLogGroupArnException, InvalidCloudWatchLogsRoleArnException, InvalidDateRangeException, InvalidEventCategoryException, InvalidEventDataStoreCategoryException, InvalidEventDataStoreStatusException, InvalidEventSelectorsException, InvalidHomeRegionException, InvalidImportSourceException, InvalidInsightSelectorsException, InvalidKmsKeyIdException, InvalidLookupAttributesException, InvalidMaxResultsException, InvalidNextTokenException, InvalidParameterCombinationException, InvalidParameterException, InvalidQueryStatementException, InvalidQueryStatusException, InvalidS3BucketNameException, InvalidS3PrefixException, InvalidSnsTopicNameException, InvalidSourceException, InvalidTagParameterException, InvalidTimeRangeException, InvalidTokenException, InvalidTrailNameException, KmsException, KmsKeyDisabledException, KmsKeyNotFoundException, MaxConcurrentQueriesException, MaximumNumberOfTrailsExceededException, NoManagementAccountSLRExistsException, NotOrganizationManagementAccountException, NotOrganizationMasterAccountException, OperationNotPermittedException, OrganizationNotInAllFeaturesModeException, OrganizationsNotInUseException, QueryIdNotFoundException, ResourceARNNotValidException, ResourceNotFoundException, ResourcePolicyNotFoundException, ResourcePolicyNotValidException, ResourceTypeNotSupportedException, S3BucketDoesNotExistException, ServiceQuotaExceededException, TagsLimitExceededException, ThrottlingException, TrailAlreadyExistsException, TrailNotFoundException, TrailNotProvidedException, UnsupportedOperationException, } from "../models/models_0";
export const se_AddTagsCommand = async (input, context) => {
    const headers = sharedHeaders("AddTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelQueryCommand = async (input, context) => {
    const headers = sharedHeaders("CancelQuery");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateChannelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDashboardCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDashboard");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEventDataStoreCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEventDataStore");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTrailCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrail");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteChannelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDashboardCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDashboard");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEventDataStoreCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEventDataStore");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTrailCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTrail");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterOrganizationDelegatedAdminCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterOrganizationDelegatedAdmin");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeQueryCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeQuery");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrailsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableFederationCommand = async (input, context) => {
    const headers = sharedHeaders("DisableFederation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableFederationCommand = async (input, context) => {
    const headers = sharedHeaders("EnableFederation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GenerateQueryCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateQuery");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetChannelCommand = async (input, context) => {
    const headers = sharedHeaders("GetChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDashboardCommand = async (input, context) => {
    const headers = sharedHeaders("GetDashboard");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEventConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetEventConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEventDataStoreCommand = async (input, context) => {
    const headers = sharedHeaders("GetEventDataStore");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEventSelectorsCommand = async (input, context) => {
    const headers = sharedHeaders("GetEventSelectors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetImportCommand = async (input, context) => {
    const headers = sharedHeaders("GetImport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInsightSelectorsCommand = async (input, context) => {
    const headers = sharedHeaders("GetInsightSelectors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetQueryResultsCommand = async (input, context) => {
    const headers = sharedHeaders("GetQueryResults");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTrailCommand = async (input, context) => {
    const headers = sharedHeaders("GetTrail");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTrailStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetTrailStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListChannelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListChannels");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDashboardsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDashboards");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEventDataStoresCommand = async (input, context) => {
    const headers = sharedHeaders("ListEventDataStores");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListImportFailuresCommand = async (input, context) => {
    const headers = sharedHeaders("ListImportFailures");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListImportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListImports");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInsightsMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("ListInsightsMetricData");
    let body;
    body = JSON.stringify(se_ListInsightsMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPublicKeysCommand = async (input, context) => {
    const headers = sharedHeaders("ListPublicKeys");
    let body;
    body = JSON.stringify(se_ListPublicKeysRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListQueriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListQueries");
    let body;
    body = JSON.stringify(se_ListQueriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTrailsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_LookupEventsCommand = async (input, context) => {
    const headers = sharedHeaders("LookupEvents");
    let body;
    body = JSON.stringify(se_LookupEventsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutEventConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutEventConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutEventSelectorsCommand = async (input, context) => {
    const headers = sharedHeaders("PutEventSelectors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutInsightSelectorsCommand = async (input, context) => {
    const headers = sharedHeaders("PutInsightSelectors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterOrganizationDelegatedAdminCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterOrganizationDelegatedAdmin");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveTagsCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreEventDataStoreCommand = async (input, context) => {
    const headers = sharedHeaders("RestoreEventDataStore");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchSampleQueriesCommand = async (input, context) => {
    const headers = sharedHeaders("SearchSampleQueries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartDashboardRefreshCommand = async (input, context) => {
    const headers = sharedHeaders("StartDashboardRefresh");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartEventDataStoreIngestionCommand = async (input, context) => {
    const headers = sharedHeaders("StartEventDataStoreIngestion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartImportCommand = async (input, context) => {
    const headers = sharedHeaders("StartImport");
    let body;
    body = JSON.stringify(se_StartImportRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartLoggingCommand = async (input, context) => {
    const headers = sharedHeaders("StartLogging");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartQueryCommand = async (input, context) => {
    const headers = sharedHeaders("StartQuery");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopEventDataStoreIngestionCommand = async (input, context) => {
    const headers = sharedHeaders("StopEventDataStoreIngestion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopImportCommand = async (input, context) => {
    const headers = sharedHeaders("StopImport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopLoggingCommand = async (input, context) => {
    const headers = sharedHeaders("StopLogging");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateChannelCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDashboardCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDashboard");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEventDataStoreCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEventDataStore");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTrailCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrail");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AddTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDashboardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEventDataStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEventDataStoreResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTrailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDashboardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEventDataStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTrailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeregisterOrganizationDelegatedAdminCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeQueryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTrailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisableFederationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_EnableFederationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GenerateQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetChannelResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDashboardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDashboardResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEventConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEventDataStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEventDataStoreResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEventSelectorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetImportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetImportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInsightSelectorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetQueryResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTrailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTrailStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTrailStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListChannelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDashboardsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEventDataStoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEventDataStoresResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListImportFailuresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListImportFailuresResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListImportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListImportsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInsightsMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInsightsMetricDataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPublicKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPublicKeysResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListQueriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListQueriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTrailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_LookupEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_LookupEventsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutEventConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutEventSelectorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutInsightSelectorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterOrganizationDelegatedAdminCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RemoveTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RestoreEventDataStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RestoreEventDataStoreResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SearchSampleQueriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchSampleQueriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartDashboardRefreshCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartEventDataStoreIngestionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartImportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartImportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartLoggingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartQueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopEventDataStoreIngestionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopImportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopImportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopLoggingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDashboardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDashboardResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEventDataStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateEventDataStoreResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTrailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ChannelARNInvalidException":
        case "com.amazonaws.cloudtrail#ChannelARNInvalidException":
            throw await de_ChannelARNInvalidExceptionRes(parsedOutput, context);
        case "ChannelNotFoundException":
        case "com.amazonaws.cloudtrail#ChannelNotFoundException":
            throw await de_ChannelNotFoundExceptionRes(parsedOutput, context);
        case "CloudTrailARNInvalidException":
        case "com.amazonaws.cloudtrail#CloudTrailARNInvalidException":
            throw await de_CloudTrailARNInvalidExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.cloudtrail#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "EventDataStoreARNInvalidException":
        case "com.amazonaws.cloudtrail#EventDataStoreARNInvalidException":
            throw await de_EventDataStoreARNInvalidExceptionRes(parsedOutput, context);
        case "EventDataStoreNotFoundException":
        case "com.amazonaws.cloudtrail#EventDataStoreNotFoundException":
            throw await de_EventDataStoreNotFoundExceptionRes(parsedOutput, context);
        case "InactiveEventDataStoreException":
        case "com.amazonaws.cloudtrail#InactiveEventDataStoreException":
            throw await de_InactiveEventDataStoreExceptionRes(parsedOutput, context);
        case "InvalidTagParameterException":
        case "com.amazonaws.cloudtrail#InvalidTagParameterException":
            throw await de_InvalidTagParameterExceptionRes(parsedOutput, context);
        case "InvalidTrailNameException":
        case "com.amazonaws.cloudtrail#InvalidTrailNameException":
            throw await de_InvalidTrailNameExceptionRes(parsedOutput, context);
        case "NoManagementAccountSLRExistsException":
        case "com.amazonaws.cloudtrail#NoManagementAccountSLRExistsException":
            throw await de_NoManagementAccountSLRExistsExceptionRes(parsedOutput, context);
        case "NotOrganizationMasterAccountException":
        case "com.amazonaws.cloudtrail#NotOrganizationMasterAccountException":
            throw await de_NotOrganizationMasterAccountExceptionRes(parsedOutput, context);
        case "OperationNotPermittedException":
        case "com.amazonaws.cloudtrail#OperationNotPermittedException":
            throw await de_OperationNotPermittedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudtrail#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceTypeNotSupportedException":
        case "com.amazonaws.cloudtrail#ResourceTypeNotSupportedException":
            throw await de_ResourceTypeNotSupportedExceptionRes(parsedOutput, context);
        case "TagsLimitExceededException":
        case "com.amazonaws.cloudtrail#TagsLimitExceededException":
            throw await de_TagsLimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.cloudtrail#UnsupportedOperationException":
            throw await de_UnsupportedOperationExceptionRes(parsedOutput, context);
        case "InactiveQueryException":
        case "com.amazonaws.cloudtrail#InactiveQueryException":
            throw await de_InactiveQueryExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cloudtrail#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "QueryIdNotFoundException":
        case "com.amazonaws.cloudtrail#QueryIdNotFoundException":
            throw await de_QueryIdNotFoundExceptionRes(parsedOutput, context);
        case "ChannelAlreadyExistsException":
        case "com.amazonaws.cloudtrail#ChannelAlreadyExistsException":
            throw await de_ChannelAlreadyExistsExceptionRes(parsedOutput, context);
        case "ChannelMaxLimitExceededException":
        case "com.amazonaws.cloudtrail#ChannelMaxLimitExceededException":
            throw await de_ChannelMaxLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidEventDataStoreCategoryException":
        case "com.amazonaws.cloudtrail#InvalidEventDataStoreCategoryException":
            throw await de_InvalidEventDataStoreCategoryExceptionRes(parsedOutput, context);
        case "InvalidSourceException":
        case "com.amazonaws.cloudtrail#InvalidSourceException":
            throw await de_InvalidSourceExceptionRes(parsedOutput, context);
        case "InsufficientEncryptionPolicyException":
        case "com.amazonaws.cloudtrail#InsufficientEncryptionPolicyException":
            throw await de_InsufficientEncryptionPolicyExceptionRes(parsedOutput, context);
        case "InvalidQueryStatementException":
        case "com.amazonaws.cloudtrail#InvalidQueryStatementException":
            throw await de_InvalidQueryStatementExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.cloudtrail#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "CloudTrailAccessNotEnabledException":
        case "com.amazonaws.cloudtrail#CloudTrailAccessNotEnabledException":
            throw await de_CloudTrailAccessNotEnabledExceptionRes(parsedOutput, context);
        case "EventDataStoreAlreadyExistsException":
        case "com.amazonaws.cloudtrail#EventDataStoreAlreadyExistsException":
            throw await de_EventDataStoreAlreadyExistsExceptionRes(parsedOutput, context);
        case "EventDataStoreMaxLimitExceededException":
        case "com.amazonaws.cloudtrail#EventDataStoreMaxLimitExceededException":
            throw await de_EventDataStoreMaxLimitExceededExceptionRes(parsedOutput, context);
        case "InsufficientDependencyServiceAccessPermissionException":
        case "com.amazonaws.cloudtrail#InsufficientDependencyServiceAccessPermissionException":
            throw await de_InsufficientDependencyServiceAccessPermissionExceptionRes(parsedOutput, context);
        case "InvalidEventSelectorsException":
        case "com.amazonaws.cloudtrail#InvalidEventSelectorsException":
            throw await de_InvalidEventSelectorsExceptionRes(parsedOutput, context);
        case "InvalidKmsKeyIdException":
        case "com.amazonaws.cloudtrail#InvalidKmsKeyIdException":
            throw await de_InvalidKmsKeyIdExceptionRes(parsedOutput, context);
        case "KmsException":
        case "com.amazonaws.cloudtrail#KmsException":
            throw await de_KmsExceptionRes(parsedOutput, context);
        case "KmsKeyNotFoundException":
        case "com.amazonaws.cloudtrail#KmsKeyNotFoundException":
            throw await de_KmsKeyNotFoundExceptionRes(parsedOutput, context);
        case "OrganizationNotInAllFeaturesModeException":
        case "com.amazonaws.cloudtrail#OrganizationNotInAllFeaturesModeException":
            throw await de_OrganizationNotInAllFeaturesModeExceptionRes(parsedOutput, context);
        case "OrganizationsNotInUseException":
        case "com.amazonaws.cloudtrail#OrganizationsNotInUseException":
            throw await de_OrganizationsNotInUseExceptionRes(parsedOutput, context);
        case "CloudTrailInvalidClientTokenIdException":
        case "com.amazonaws.cloudtrail#CloudTrailInvalidClientTokenIdException":
            throw await de_CloudTrailInvalidClientTokenIdExceptionRes(parsedOutput, context);
        case "CloudWatchLogsDeliveryUnavailableException":
        case "com.amazonaws.cloudtrail#CloudWatchLogsDeliveryUnavailableException":
            throw await de_CloudWatchLogsDeliveryUnavailableExceptionRes(parsedOutput, context);
        case "InsufficientS3BucketPolicyException":
        case "com.amazonaws.cloudtrail#InsufficientS3BucketPolicyException":
            throw await de_InsufficientS3BucketPolicyExceptionRes(parsedOutput, context);
        case "InsufficientSnsTopicPolicyException":
        case "com.amazonaws.cloudtrail#InsufficientSnsTopicPolicyException":
            throw await de_InsufficientSnsTopicPolicyExceptionRes(parsedOutput, context);
        case "InvalidCloudWatchLogsLogGroupArnException":
        case "com.amazonaws.cloudtrail#InvalidCloudWatchLogsLogGroupArnException":
            throw await de_InvalidCloudWatchLogsLogGroupArnExceptionRes(parsedOutput, context);
        case "InvalidCloudWatchLogsRoleArnException":
        case "com.amazonaws.cloudtrail#InvalidCloudWatchLogsRoleArnException":
            throw await de_InvalidCloudWatchLogsRoleArnExceptionRes(parsedOutput, context);
        case "InvalidParameterCombinationException":
        case "com.amazonaws.cloudtrail#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidS3BucketNameException":
        case "com.amazonaws.cloudtrail#InvalidS3BucketNameException":
            throw await de_InvalidS3BucketNameExceptionRes(parsedOutput, context);
        case "InvalidS3PrefixException":
        case "com.amazonaws.cloudtrail#InvalidS3PrefixException":
            throw await de_InvalidS3PrefixExceptionRes(parsedOutput, context);
        case "InvalidSnsTopicNameException":
        case "com.amazonaws.cloudtrail#InvalidSnsTopicNameException":
            throw await de_InvalidSnsTopicNameExceptionRes(parsedOutput, context);
        case "KmsKeyDisabledException":
        case "com.amazonaws.cloudtrail#KmsKeyDisabledException":
            throw await de_KmsKeyDisabledExceptionRes(parsedOutput, context);
        case "MaximumNumberOfTrailsExceededException":
        case "com.amazonaws.cloudtrail#MaximumNumberOfTrailsExceededException":
            throw await de_MaximumNumberOfTrailsExceededExceptionRes(parsedOutput, context);
        case "S3BucketDoesNotExistException":
        case "com.amazonaws.cloudtrail#S3BucketDoesNotExistException":
            throw await de_S3BucketDoesNotExistExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.cloudtrail#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "TrailAlreadyExistsException":
        case "com.amazonaws.cloudtrail#TrailAlreadyExistsException":
            throw await de_TrailAlreadyExistsExceptionRes(parsedOutput, context);
        case "TrailNotProvidedException":
        case "com.amazonaws.cloudtrail#TrailNotProvidedException":
            throw await de_TrailNotProvidedExceptionRes(parsedOutput, context);
        case "ChannelExistsForEDSException":
        case "com.amazonaws.cloudtrail#ChannelExistsForEDSException":
            throw await de_ChannelExistsForEDSExceptionRes(parsedOutput, context);
        case "EventDataStoreFederationEnabledException":
        case "com.amazonaws.cloudtrail#EventDataStoreFederationEnabledException":
            throw await de_EventDataStoreFederationEnabledExceptionRes(parsedOutput, context);
        case "EventDataStoreHasOngoingImportException":
        case "com.amazonaws.cloudtrail#EventDataStoreHasOngoingImportException":
            throw await de_EventDataStoreHasOngoingImportExceptionRes(parsedOutput, context);
        case "EventDataStoreTerminationProtectedException":
        case "com.amazonaws.cloudtrail#EventDataStoreTerminationProtectedException":
            throw await de_EventDataStoreTerminationProtectedExceptionRes(parsedOutput, context);
        case "ResourceARNNotValidException":
        case "com.amazonaws.cloudtrail#ResourceARNNotValidException":
            throw await de_ResourceARNNotValidExceptionRes(parsedOutput, context);
        case "ResourcePolicyNotFoundException":
        case "com.amazonaws.cloudtrail#ResourcePolicyNotFoundException":
            throw await de_ResourcePolicyNotFoundExceptionRes(parsedOutput, context);
        case "InvalidHomeRegionException":
        case "com.amazonaws.cloudtrail#InvalidHomeRegionException":
            throw await de_InvalidHomeRegionExceptionRes(parsedOutput, context);
        case "TrailNotFoundException":
        case "com.amazonaws.cloudtrail#TrailNotFoundException":
            throw await de_TrailNotFoundExceptionRes(parsedOutput, context);
        case "AccountNotFoundException":
        case "com.amazonaws.cloudtrail#AccountNotFoundException":
            throw await de_AccountNotFoundExceptionRes(parsedOutput, context);
        case "AccountNotRegisteredException":
        case "com.amazonaws.cloudtrail#AccountNotRegisteredException":
            throw await de_AccountNotRegisteredExceptionRes(parsedOutput, context);
        case "NotOrganizationManagementAccountException":
        case "com.amazonaws.cloudtrail#NotOrganizationManagementAccountException":
            throw await de_NotOrganizationManagementAccountExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.cloudtrail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.cloudtrail#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "GenerateResponseException":
        case "com.amazonaws.cloudtrail#GenerateResponseException":
            throw await de_GenerateResponseExceptionRes(parsedOutput, context);
        case "InvalidEventDataStoreStatusException":
        case "com.amazonaws.cloudtrail#InvalidEventDataStoreStatusException":
            throw await de_InvalidEventDataStoreStatusExceptionRes(parsedOutput, context);
        case "ImportNotFoundException":
        case "com.amazonaws.cloudtrail#ImportNotFoundException":
            throw await de_ImportNotFoundExceptionRes(parsedOutput, context);
        case "InsightNotEnabledException":
        case "com.amazonaws.cloudtrail#InsightNotEnabledException":
            throw await de_InsightNotEnabledExceptionRes(parsedOutput, context);
        case "InvalidMaxResultsException":
        case "com.amazonaws.cloudtrail#InvalidMaxResultsException":
            throw await de_InvalidMaxResultsExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.cloudtrail#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "InvalidTimeRangeException":
        case "com.amazonaws.cloudtrail#InvalidTimeRangeException":
            throw await de_InvalidTimeRangeExceptionRes(parsedOutput, context);
        case "InvalidTokenException":
        case "com.amazonaws.cloudtrail#InvalidTokenException":
            throw await de_InvalidTokenExceptionRes(parsedOutput, context);
        case "InvalidDateRangeException":
        case "com.amazonaws.cloudtrail#InvalidDateRangeException":
            throw await de_InvalidDateRangeExceptionRes(parsedOutput, context);
        case "InvalidQueryStatusException":
        case "com.amazonaws.cloudtrail#InvalidQueryStatusException":
            throw await de_InvalidQueryStatusExceptionRes(parsedOutput, context);
        case "InvalidEventCategoryException":
        case "com.amazonaws.cloudtrail#InvalidEventCategoryException":
            throw await de_InvalidEventCategoryExceptionRes(parsedOutput, context);
        case "InvalidLookupAttributesException":
        case "com.amazonaws.cloudtrail#InvalidLookupAttributesException":
            throw await de_InvalidLookupAttributesExceptionRes(parsedOutput, context);
        case "InsufficientIAMAccessPermissionException":
        case "com.amazonaws.cloudtrail#InsufficientIAMAccessPermissionException":
            throw await de_InsufficientIAMAccessPermissionExceptionRes(parsedOutput, context);
        case "InvalidInsightSelectorsException":
        case "com.amazonaws.cloudtrail#InvalidInsightSelectorsException":
            throw await de_InvalidInsightSelectorsExceptionRes(parsedOutput, context);
        case "ResourcePolicyNotValidException":
        case "com.amazonaws.cloudtrail#ResourcePolicyNotValidException":
            throw await de_ResourcePolicyNotValidExceptionRes(parsedOutput, context);
        case "AccountRegisteredException":
        case "com.amazonaws.cloudtrail#AccountRegisteredException":
            throw await de_AccountRegisteredExceptionRes(parsedOutput, context);
        case "CannotDelegateManagementAccountException":
        case "com.amazonaws.cloudtrail#CannotDelegateManagementAccountException":
            throw await de_CannotDelegateManagementAccountExceptionRes(parsedOutput, context);
        case "DelegatedAdminAccountLimitExceededException":
        case "com.amazonaws.cloudtrail#DelegatedAdminAccountLimitExceededException":
            throw await de_DelegatedAdminAccountLimitExceededExceptionRes(parsedOutput, context);
        case "AccountHasOngoingImportException":
        case "com.amazonaws.cloudtrail#AccountHasOngoingImportException":
            throw await de_AccountHasOngoingImportExceptionRes(parsedOutput, context);
        case "InvalidImportSourceException":
        case "com.amazonaws.cloudtrail#InvalidImportSourceException":
            throw await de_InvalidImportSourceExceptionRes(parsedOutput, context);
        case "MaxConcurrentQueriesException":
        case "com.amazonaws.cloudtrail#MaxConcurrentQueriesException":
            throw await de_MaxConcurrentQueriesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AccountHasOngoingImportExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccountHasOngoingImportException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AccountNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccountNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AccountNotRegisteredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccountNotRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AccountRegisteredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccountRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CannotDelegateManagementAccountExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CannotDelegateManagementAccountException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ChannelAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ChannelAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ChannelARNInvalidExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ChannelARNInvalidException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ChannelExistsForEDSExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ChannelExistsForEDSException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ChannelMaxLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ChannelMaxLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ChannelNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ChannelNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CloudTrailAccessNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CloudTrailAccessNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CloudTrailARNInvalidExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CloudTrailARNInvalidException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CloudTrailInvalidClientTokenIdExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CloudTrailInvalidClientTokenIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CloudWatchLogsDeliveryUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CloudWatchLogsDeliveryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DelegatedAdminAccountLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DelegatedAdminAccountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EventDataStoreAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EventDataStoreAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EventDataStoreARNInvalidExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EventDataStoreARNInvalidException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EventDataStoreFederationEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EventDataStoreFederationEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EventDataStoreHasOngoingImportExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EventDataStoreHasOngoingImportException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EventDataStoreMaxLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EventDataStoreMaxLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EventDataStoreNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EventDataStoreNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EventDataStoreTerminationProtectedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EventDataStoreTerminationProtectedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_GenerateResponseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new GenerateResponseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ImportNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ImportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InactiveEventDataStoreExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InactiveEventDataStoreException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InactiveQueryExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InactiveQueryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InsightNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InsightNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InsufficientDependencyServiceAccessPermissionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InsufficientDependencyServiceAccessPermissionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InsufficientEncryptionPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InsufficientEncryptionPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InsufficientIAMAccessPermissionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InsufficientIAMAccessPermissionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InsufficientS3BucketPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InsufficientS3BucketPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InsufficientSnsTopicPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InsufficientSnsTopicPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidCloudWatchLogsLogGroupArnExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidCloudWatchLogsLogGroupArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidCloudWatchLogsRoleArnExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidCloudWatchLogsRoleArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidDateRangeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidDateRangeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidEventCategoryExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidEventCategoryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidEventDataStoreCategoryExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidEventDataStoreCategoryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidEventDataStoreStatusExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidEventDataStoreStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidEventSelectorsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidEventSelectorsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidHomeRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidHomeRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidImportSourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidImportSourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInsightSelectorsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInsightSelectorsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidKmsKeyIdExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidKmsKeyIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidLookupAttributesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidLookupAttributesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidMaxResultsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidMaxResultsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterCombinationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidQueryStatementExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidQueryStatementException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidQueryStatusExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidQueryStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidS3BucketNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidS3BucketNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidS3PrefixExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidS3PrefixException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidSnsTopicNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidSnsTopicNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidSourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidSourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTagParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTagParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTimeRangeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTimeRangeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTrailNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTrailNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_KmsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new KmsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_KmsKeyDisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new KmsKeyDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_KmsKeyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new KmsKeyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MaxConcurrentQueriesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MaxConcurrentQueriesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MaximumNumberOfTrailsExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MaximumNumberOfTrailsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NoManagementAccountSLRExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NoManagementAccountSLRExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotOrganizationManagementAccountExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotOrganizationManagementAccountException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotOrganizationMasterAccountExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotOrganizationMasterAccountException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationNotPermittedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationNotPermittedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OrganizationNotInAllFeaturesModeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OrganizationNotInAllFeaturesModeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OrganizationsNotInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OrganizationsNotInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_QueryIdNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new QueryIdNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceARNNotValidExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceARNNotValidException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourcePolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourcePolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourcePolicyNotValidExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourcePolicyNotValidException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceTypeNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceTypeNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_S3BucketDoesNotExistExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new S3BucketDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TagsLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TagsLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TrailAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TrailAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TrailNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TrailNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TrailNotProvidedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TrailNotProvidedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_ListInsightsMetricDataRequest = (input, context) => {
    return take(input, {
        DataType: [],
        EndTime: (_) => _.getTime() / 1_000,
        ErrorCode: [],
        EventName: [],
        EventSource: [],
        InsightType: [],
        MaxResults: [],
        NextToken: [],
        Period: [],
        StartTime: (_) => _.getTime() / 1_000,
    });
};
const se_ListPublicKeysRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => _.getTime() / 1_000,
        NextToken: [],
        StartTime: (_) => _.getTime() / 1_000,
    });
};
const se_ListQueriesRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => _.getTime() / 1_000,
        EventDataStore: [],
        MaxResults: [],
        NextToken: [],
        QueryStatus: [],
        StartTime: (_) => _.getTime() / 1_000,
    });
};
const se_LookupEventsRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => _.getTime() / 1_000,
        EventCategory: [],
        LookupAttributes: _json,
        MaxResults: [],
        NextToken: [],
        StartTime: (_) => _.getTime() / 1_000,
    });
};
const se_StartImportRequest = (input, context) => {
    return take(input, {
        Destinations: _json,
        EndEventTime: (_) => _.getTime() / 1_000,
        ImportId: [],
        ImportSource: _json,
        StartEventTime: (_) => _.getTime() / 1_000,
    });
};
const de_CreateEventDataStoreResponse = (output, context) => {
    return take(output, {
        AdvancedEventSelectors: _json,
        BillingMode: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EventDataStoreArn: __expectString,
        KmsKeyId: __expectString,
        MultiRegionEnabled: __expectBoolean,
        Name: __expectString,
        OrganizationEnabled: __expectBoolean,
        RetentionPeriod: __expectInt32,
        Status: __expectString,
        TagsList: _json,
        TerminationProtectionEnabled: __expectBoolean,
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeQueryResponse = (output, context) => {
    return take(output, {
        DeliveryS3Uri: __expectString,
        DeliveryStatus: __expectString,
        ErrorMessage: __expectString,
        EventDataStoreOwnerAccountId: __expectString,
        Prompt: __expectString,
        QueryId: __expectString,
        QueryStatistics: (_) => de_QueryStatisticsForDescribeQuery(_, context),
        QueryStatus: __expectString,
        QueryString: __expectString,
    });
};
const de_Event = (output, context) => {
    return take(output, {
        AccessKeyId: __expectString,
        CloudTrailEvent: __expectString,
        EventId: __expectString,
        EventName: __expectString,
        EventSource: __expectString,
        EventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReadOnly: __expectString,
        Resources: _json,
        Username: __expectString,
    });
};
const de_EventDataStore = (output, context) => {
    return take(output, {
        AdvancedEventSelectors: _json,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EventDataStoreArn: __expectString,
        MultiRegionEnabled: __expectBoolean,
        Name: __expectString,
        OrganizationEnabled: __expectBoolean,
        RetentionPeriod: __expectInt32,
        Status: __expectString,
        TerminationProtectionEnabled: __expectBoolean,
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_EventDataStores = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventDataStore(entry, context);
    });
    return retVal;
};
const de_EventsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Event(entry, context);
    });
    return retVal;
};
const de_GetChannelResponse = (output, context) => {
    return take(output, {
        ChannelArn: __expectString,
        Destinations: _json,
        IngestionStatus: (_) => de_IngestionStatus(_, context),
        Name: __expectString,
        Source: __expectString,
        SourceConfig: _json,
    });
};
const de_GetDashboardResponse = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DashboardArn: __expectString,
        LastRefreshFailureReason: __expectString,
        LastRefreshId: __expectString,
        RefreshSchedule: _json,
        Status: __expectString,
        TerminationProtectionEnabled: __expectBoolean,
        Type: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Widgets: _json,
    });
};
const de_GetEventDataStoreResponse = (output, context) => {
    return take(output, {
        AdvancedEventSelectors: _json,
        BillingMode: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EventDataStoreArn: __expectString,
        FederationRoleArn: __expectString,
        FederationStatus: __expectString,
        KmsKeyId: __expectString,
        MultiRegionEnabled: __expectBoolean,
        Name: __expectString,
        OrganizationEnabled: __expectBoolean,
        PartitionKeys: _json,
        RetentionPeriod: __expectInt32,
        Status: __expectString,
        TerminationProtectionEnabled: __expectBoolean,
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_GetImportResponse = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destinations: _json,
        EndEventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImportId: __expectString,
        ImportSource: _json,
        ImportStatistics: _json,
        ImportStatus: __expectString,
        StartEventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_GetTrailStatusResponse = (output, context) => {
    return take(output, {
        IsLogging: __expectBoolean,
        LatestCloudWatchLogsDeliveryError: __expectString,
        LatestCloudWatchLogsDeliveryTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestDeliveryAttemptSucceeded: __expectString,
        LatestDeliveryAttemptTime: __expectString,
        LatestDeliveryError: __expectString,
        LatestDeliveryTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestDigestDeliveryError: __expectString,
        LatestDigestDeliveryTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestNotificationAttemptSucceeded: __expectString,
        LatestNotificationAttemptTime: __expectString,
        LatestNotificationError: __expectString,
        LatestNotificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartLoggingTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StopLoggingTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TimeLoggingStarted: __expectString,
        TimeLoggingStopped: __expectString,
    });
};
const de_ImportFailureList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportFailureListItem(entry, context);
    });
    return retVal;
};
const de_ImportFailureListItem = (output, context) => {
    return take(output, {
        ErrorMessage: __expectString,
        ErrorType: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Location: __expectString,
        Status: __expectString,
    });
};
const de_ImportsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportsListItem(entry, context);
    });
    return retVal;
};
const de_ImportsListItem = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destinations: _json,
        ImportId: __expectString,
        ImportStatus: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_IngestionStatus = (output, context) => {
    return take(output, {
        LatestIngestionAttemptEventID: __expectString,
        LatestIngestionAttemptTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestIngestionErrorCode: __expectString,
        LatestIngestionSuccessEventID: __expectString,
        LatestIngestionSuccessTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_InsightsMetricValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_ListEventDataStoresResponse = (output, context) => {
    return take(output, {
        EventDataStores: (_) => de_EventDataStores(_, context),
        NextToken: __expectString,
    });
};
const de_ListImportFailuresResponse = (output, context) => {
    return take(output, {
        Failures: (_) => de_ImportFailureList(_, context),
        NextToken: __expectString,
    });
};
const de_ListImportsResponse = (output, context) => {
    return take(output, {
        Imports: (_) => de_ImportsList(_, context),
        NextToken: __expectString,
    });
};
const de_ListInsightsMetricDataResponse = (output, context) => {
    return take(output, {
        ErrorCode: __expectString,
        EventName: __expectString,
        EventSource: __expectString,
        InsightType: __expectString,
        NextToken: __expectString,
        Timestamps: (_) => de_Timestamps(_, context),
        Values: (_) => de_InsightsMetricValues(_, context),
    });
};
const de_ListPublicKeysResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PublicKeyList: (_) => de_PublicKeyList(_, context),
    });
};
const de_ListQueriesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Queries: (_) => de_Queries(_, context),
    });
};
const de_LookupEventsResponse = (output, context) => {
    return take(output, {
        Events: (_) => de_EventsList(_, context),
        NextToken: __expectString,
    });
};
const de_PublicKey = (output, context) => {
    return take(output, {
        Fingerprint: __expectString,
        ValidityEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ValidityStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Value: context.base64Decoder,
    });
};
const de_PublicKeyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PublicKey(entry, context);
    });
    return retVal;
};
const de_Queries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Query(entry, context);
    });
    return retVal;
};
const de_Query = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        QueryId: __expectString,
        QueryStatus: __expectString,
    });
};
const de_QueryStatisticsForDescribeQuery = (output, context) => {
    return take(output, {
        BytesScanned: __expectLong,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EventsMatched: __expectLong,
        EventsScanned: __expectLong,
        ExecutionTimeInMillis: __expectInt32,
    });
};
const de_RestoreEventDataStoreResponse = (output, context) => {
    return take(output, {
        AdvancedEventSelectors: _json,
        BillingMode: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EventDataStoreArn: __expectString,
        KmsKeyId: __expectString,
        MultiRegionEnabled: __expectBoolean,
        Name: __expectString,
        OrganizationEnabled: __expectBoolean,
        RetentionPeriod: __expectInt32,
        Status: __expectString,
        TerminationProtectionEnabled: __expectBoolean,
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_SearchSampleQueriesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        SearchResults: (_) => de_SearchSampleQueriesSearchResults(_, context),
    });
};
const de_SearchSampleQueriesSearchResult = (output, context) => {
    return take(output, {
        Description: __expectString,
        Name: __expectString,
        Relevance: __limitedParseFloat32,
        SQL: __expectString,
    });
};
const de_SearchSampleQueriesSearchResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SearchSampleQueriesSearchResult(entry, context);
    });
    return retVal;
};
const de_StartImportResponse = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destinations: _json,
        EndEventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImportId: __expectString,
        ImportSource: _json,
        ImportStatus: __expectString,
        StartEventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_StopImportResponse = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destinations: _json,
        EndEventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImportId: __expectString,
        ImportSource: _json,
        ImportStatistics: _json,
        ImportStatus: __expectString,
        StartEventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Timestamps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectNonNull(__parseEpochTimestamp(__expectNumber(entry)));
    });
    return retVal;
};
const de_UpdateDashboardResponse = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DashboardArn: __expectString,
        Name: __expectString,
        RefreshSchedule: _json,
        TerminationProtectionEnabled: __expectBoolean,
        Type: __expectString,
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Widgets: _json,
    });
};
const de_UpdateEventDataStoreResponse = (output, context) => {
    return take(output, {
        AdvancedEventSelectors: _json,
        BillingMode: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EventDataStoreArn: __expectString,
        FederationRoleArn: __expectString,
        FederationStatus: __expectString,
        KmsKeyId: __expectString,
        MultiRegionEnabled: __expectBoolean,
        Name: __expectString,
        OrganizationEnabled: __expectBoolean,
        RetentionPeriod: __expectInt32,
        Status: __expectString,
        TerminationProtectionEnabled: __expectBoolean,
        UpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `CloudTrail_20131101.${operation}`,
    };
}
