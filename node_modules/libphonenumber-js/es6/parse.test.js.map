{"version":3,"file":"parse.test.js","names":["metadata","type","_parseNumber","Metadata","parseNumber","_len","arguments","length","parameters","Array","_key","push","undefined","_objectSpread","defaultCountry","apply","USE_NON_GEOGRAPHIC_COUNTRY_CODE","describe","it","expect","to","deep","equal","country","phone","extended","countryCallingCode","carrierCode","ext","valid","possible","thrower","defaultCallingCode","be","v2","phoneNumber","not","phoneNumber2"],"sources":["../source/parse.test.js"],"sourcesContent":["import metadata from '../metadata.min.json' with { type: 'json' }\r\nimport _parseNumber from './parse.js'\r\nimport Metadata from './metadata.js'\r\n\r\nfunction parseNumber(...parameters) {\r\n\tif (parameters.length < 2) {\r\n\t\t// `options` parameter.\r\n\t\tparameters.push(undefined)\r\n\t}\r\n\t// Convert default country argument to an `options` object.\r\n\tif (typeof parameters[1] === 'string') {\r\n\t\tparameters[1] = {\r\n\t\t\t...parameters[2],\r\n\t\t\tdefaultCountry: parameters[1]\r\n\t\t}\r\n\t}\r\n\tif (parameters[2]) {\r\n\t\tparameters[2] = metadata\r\n\t} else {\r\n\t\tparameters.push(metadata)\r\n\t}\r\n\treturn _parseNumber.apply(this, parameters)\r\n}\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\ndescribe('parse', () => {\r\n\tit('should not parse invalid phone numbers', () => {\r\n\t\t// Too short.\r\n\t\texpect(parseNumber('+7 (800) 55-35-35')).to.deep.equal({})\r\n\t\t// Too long.\r\n\t\texpect(parseNumber('+7 (800) 55-35-35-55')).to.deep.equal({})\r\n\r\n\t\texpect(parseNumber('+7 (800) 55-35-35', 'US')).to.deep.equal({})\r\n\t\texpect(parseNumber('(800) 55 35 35', { defaultCountry: 'RU' })).to.deep.equal({})\r\n\t\texpect(parseNumber('+1 187 215 5230', 'US')).to.deep.equal({})\r\n\r\n\t\texpect(parseNumber('911231231', 'BE')).to.deep.equal({})\r\n\t})\r\n\r\n\tit('should parse valid phone numbers', () => {\r\n\t\t// Instant loans\r\n\t\t// https://www.youtube.com/watch?v=6e1pMrYH5jI\r\n\t\t//\r\n\t\t// Restrict to RU\r\n\t\texpect(parseNumber('Phone: 8 (800) 555 35 35.', 'RU')).to.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// International format\r\n\t\texpect(parseNumber('Phone: +7 (800) 555-35-35.')).to.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// // Restrict to US, but not a US country phone code supplied\r\n\t\t// parseNumber('+7 (800) 555-35-35', 'US').should.deep.equal({})\r\n\t\t// Restrict to RU\r\n\t\texpect(parseNumber('(800) 555 35 35', 'RU')).to.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\t\t// Default to RU\r\n\t\texpect(parseNumber('8 (800) 555 35 35', { defaultCountry: 'RU' })).to.deep.equal({ country: 'RU', phone: '8005553535' })\r\n\r\n\t\t// Gangster partyline\r\n\t\texpect(parseNumber('+1-213-373-4253')).to.deep.equal({ country: 'US', phone: '2133734253' })\r\n\r\n\t\t// Switzerland (just in case)\r\n\t\texpect(parseNumber('044 668 18 00', 'CH')).to.deep.equal({ country: 'CH', phone: '446681800' })\r\n\r\n\t\t// China, Beijing\r\n\t\texpect(parseNumber('010-852644821', 'CN')).to.deep.equal({ country: 'CN', phone: '10852644821' })\r\n\r\n\t\t// France\r\n\t\texpect(parseNumber('+33169454850')).to.deep.equal({ country: 'FR', phone: '169454850' })\r\n\r\n\t\t// UK (Jersey)\r\n\t\texpect(parseNumber('+44 7700 300000')).to.deep.equal({ country: 'JE', phone: '7700300000' })\r\n\r\n\t\t// KZ\r\n\t\texpect(parseNumber('+7 702 211 1111')).to.deep.equal({ country: 'KZ', phone: '7022111111' })\r\n\r\n\t\t// Brazil\r\n\t\texpect(parseNumber('11987654321', 'BR')).to.deep.equal({ country: 'BR', phone: '11987654321' })\r\n\r\n\t\t// Long country phone code.\r\n\t\texpect(parseNumber('+212659777777')).to.deep.equal({ country: 'MA', phone: '659777777' })\r\n\r\n\t\t// No country could be derived.\r\n\t\t// parseNumber('+212569887076').should.deep.equal({ countryPhoneCode: '212', phone: '569887076' })\r\n\r\n\t\t// GB. Moible numbers starting 07624* are Isle of Man.\r\n\t\texpect(parseNumber('07624369230', 'GB')).to.deep.equal({ country: 'IM', phone: '7624369230' })\r\n\t})\r\n\r\n\tit('should parse possible numbers', () => {\r\n\t\t// Invalid phone number for a given country.\r\n\t\texpect(parseNumber('1112223344', 'RU', { extended: true })).to.deep.equal({\r\n\t\t\tcountry            : 'RU',\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '1112223344',\r\n\t\t\tcarrierCode        : undefined,\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\r\n\t\t// International phone number.\r\n\t\t// Several countries with the same country phone code.\r\n\t\texpect(parseNumber('+71112223344')).to.deep.equal({})\r\n\t\texpect(parseNumber('+71112223344', { extended: true })).to.deep.equal({\r\n\t\t\tcountry            : undefined,\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '1112223344',\r\n\t\t\tcarrierCode        : undefined,\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\r\n\t\t// International phone number.\r\n\t\t// Single country with the given country phone code.\r\n\t\texpect(parseNumber('+33011222333', { extended: true })).to.deep.equal({\r\n\t\t\tcountry            : 'FR',\r\n\t\t\tcountryCallingCode : '33',\r\n\t\t\tphone              : '011222333',\r\n\t\t\tcarrierCode        : undefined,\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\r\n\t\t// Too short.\r\n\t\t// Won't strip national prefix `8` because otherwise the number would be too short.\r\n\t\texpect(parseNumber('+7 (800) 55-35-35', { extended: true })).to.deep.equal({\r\n\t\t\tcountry            : undefined,\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '800553535',\r\n\t\t\tcarrierCode        : undefined,\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : false\r\n\t\t})\r\n\r\n\t\t// Too long.\r\n\t\texpect(parseNumber('+1 213 37342530', { extended: true })).to.deep.equal({\r\n\t\t\tcountry            : undefined,\r\n\t\t\tcountryCallingCode : '1',\r\n\t\t\tphone              : '21337342530',\r\n\t\t\tcarrierCode        : undefined,\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : false,\r\n\t\t\tpossible           : false\r\n\t\t})\r\n\r\n\t\t// No national number to be parsed.\r\n\t\texpect(parseNumber('+996', { extended: true })).to.deep.equal({\r\n\t\t\t// countryCallingCode : '996'\r\n\t\t})\r\n\r\n\t\t// Valid number.\r\n\t\texpect(parseNumber('+78005553535', { extended: true })).to.deep.equal({\r\n\t\t\tcountry            : 'RU',\r\n\t\t\tcountryCallingCode : '7',\r\n\t\t\tphone              : '8005553535',\r\n\t\t\tcarrierCode        : undefined,\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : true,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/211\r\n\t\texpect(parseNumber('+966', { extended: true })).to.deep.equal({})\r\n\t\texpect(parseNumber('+9664', { extended: true })).to.deep.equal({})\r\n\t\texpect(parseNumber('+96645', { extended: true })).to.deep.equal({\r\n\t\t\tcarrierCode        : undefined,\r\n\t\t\tphone              : '45',\r\n\t\t\text                : undefined,\r\n\t\t\tcountry            : 'SA',\r\n\t\t\tcountryCallingCode : '966',\r\n\t\t\tpossible           : false,\r\n\t\t\tvalid              : false\r\n\t\t})\r\n\t})\r\n\r\n\tit('should parse non-European digits', () => {\r\n\t\texpect(parseNumber('+١٢١٢٢٣٢٣٢٣٢')).to.deep.equal({ country: 'US', phone: '2122323232' })\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\tlet thrower\r\n\r\n\t\t// No input\r\n\t\texpect(parseNumber('')).to.deep.equal({})\r\n\r\n\t\t// No country phone code\r\n\t\texpect(parseNumber('+')).to.deep.equal({})\r\n\r\n\t\t// No country at all (non international number and no explicit country code)\r\n\t\texpect(parseNumber('123')).to.deep.equal({})\r\n\r\n\t\t// No country metadata for this `require` country code\r\n\t\tthrower = () => parseNumber('123', 'ZZ')\r\n\t\texpect(thrower).to.throw('Unknown country')\r\n\r\n\t\t// No country metadata for this `default` country code\r\n\t\tthrower = () => parseNumber('123', { defaultCountry: 'ZZ' })\r\n\t\texpect(thrower).to.throw('Unknown country')\r\n\r\n\t\t// Invalid country phone code\r\n\t\texpect(parseNumber('+210')).to.deep.equal({})\r\n\r\n\t\t// Invalid country phone code (extended parsing mode)\r\n\t\texpect(parseNumber('+210', { extended: true })).to.deep.equal({})\r\n\r\n\t\t// Too short of a number.\r\n\t\texpect(parseNumber('1', 'US', { extended: true })).to.deep.equal({})\r\n\r\n\t\t// Too long of a number.\r\n\t\texpect(parseNumber('1111111111111111111', 'RU', { extended: true })).to.deep.equal({})\r\n\r\n\t\t// Not a number.\r\n\t\texpect(parseNumber('abcdefg', 'US', { extended: true })).to.deep.equal({})\r\n\r\n\t\t// Country phone code beginning with a '0'\r\n\t\texpect(parseNumber('+0123')).to.deep.equal({})\r\n\r\n\t\t// Barbados NANPA phone number\r\n\t\texpect(parseNumber('+12460000000')).to.deep.equal({ country: 'BB', phone: '2460000000' })\r\n\r\n\t\t// // A case when country (restricted to) is not equal\r\n\t\t// // to the one parsed out of an international number.\r\n\t\t// parseNumber('+1-213-373-4253', 'RU').should.deep.equal({})\r\n\r\n\t\t// National (significant) number too short\r\n\t\texpect(parseNumber('2', 'US')).to.deep.equal({})\r\n\r\n\t\t// National (significant) number too long\r\n\t\texpect(parseNumber('222222222222222222', 'US')).to.deep.equal({})\r\n\r\n\t\t// No `national_prefix_for_parsing`\r\n\t\texpect(parseNumber('41111', 'AC')).to.deep.equal({ country: 'AC', phone: '41111'})\r\n\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/235\r\n\t\t// `matchesEntirely()` bug fix.\r\n\t\texpect(parseNumber('+4915784846111‬')).to.deep.equal({ country: 'DE', phone: '15784846111' })\r\n\r\n\t\t// No metadata\r\n\t\tthrower = () => _parseNumber('')\r\n\t\texpect(thrower).to.throw('`metadata` argument not passed')\r\n\r\n\t\t// // Numerical `value`\r\n\t\t// thrower = () => parseNumber(2141111111, 'US')\r\n\t\t// thrower.should.throw('A text for parsing must be a string.')\r\n\r\n\t\t// Input string too long.\r\n\t\texpect(\r\n            parseNumber('8005553535                                                                                                                                                                                                                                                 ', 'RU')\r\n        ).to.deep.equal({})\r\n\t})\r\n\r\n\tit('should parse phone number extensions', () => {\r\n\t\t// \"ext\"\r\n\t\texpect(parseNumber('2134567890 ext 123', 'US')).to.deep.equal({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// \"ext.\"\r\n\t\texpect(parseNumber('+12134567890 ext. 12345', 'US')).to.deep.equal({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '12345'\r\n\t\t})\r\n\r\n\t\t// \"доб.\"\r\n\t\texpect(parseNumber('+78005553535 доб. 1234', 'RU')).to.deep.equal({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '1234'\r\n\t\t})\r\n\r\n\t\t// \"#\"\r\n\t\texpect(parseNumber('+12134567890#1234')).to.deep.equal({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890',\r\n\t\t\text     : '1234'\r\n\t\t})\r\n\r\n\t\t// \"x\"\r\n\t\texpect(parseNumber('+78005553535 x1234')).to.deep.equal({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '1234'\r\n\t\t})\r\n\r\n\t\t// Not a valid extension\r\n\t\texpect(parseNumber('2134567890 ext. abc', 'US')).to.deep.equal({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2134567890'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should parse RFC 3966 phone numbers', () => {\r\n\t\texpect(parseNumber('tel:+78005553535;ext=123')).to.deep.equal({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// Should parse \"visual separators\".\r\n\t\texpect(parseNumber('tel:+7(800)555-35.35;ext=123')).to.deep.equal({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\text     : '123'\r\n\t\t})\r\n\r\n\t\t// Invalid number.\r\n\t\texpect(parseNumber('tel:+7x8005553535;ext=123')).to.deep.equal({})\r\n\t})\r\n\r\n\tit('should parse invalid international numbers even if they are invalid', () => {\r\n\t\texpect(parseNumber('+7(8)8005553535', 'RU')).to.deep.equal({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should parse carrier codes', () => {\r\n\t\texpect(parseNumber('0 15 21 5555-5555', 'BR', { extended: true })).to.deep.equal({\r\n\t\t\tcountry            : 'BR',\r\n\t\t\tcountryCallingCode : '55',\r\n\t\t\tphone              : '2155555555',\r\n\t\t\tcarrierCode        : '15',\r\n\t\t\text                : undefined,\r\n\t\t\tvalid              : true,\r\n\t\t\tpossible           : true\r\n\t\t})\r\n\t})\r\n\r\n\tit('should parse IDD prefixes', () => {\r\n\t\texpect(parseNumber('011 61 2 3456 7890', 'US')).to.deep.equal({\r\n\t\t\tphone   : '234567890',\r\n\t\t\tcountry : 'AU'\r\n\t\t})\r\n\r\n\t\texpect(parseNumber('011 61 2 3456 7890', 'FR')).to.deep.equal({})\r\n\r\n\t\texpect(parseNumber('00 61 2 3456 7890', 'US')).to.deep.equal({})\r\n\r\n\t\texpect(parseNumber('810 61 2 3456 7890', 'RU')).to.deep.equal({\r\n\t\t\tphone   : '234567890',\r\n\t\t\tcountry : 'AU'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should work with v2 API', () => {\r\n\t\tparseNumber('+99989160151539')\r\n\t})\r\n\r\n\tit('should work with Argentina numbers', () => {\r\n\t\t// The same mobile number is written differently\r\n\t\t// in different formats in Argentina:\r\n\t\t// `9` gets prepended in international format.\r\n\t\texpect(parseNumber('+54 9 3435 55 1212')).to.deep.equal({\r\n\t\t\tcountry: 'AR',\r\n\t\t\tphone: '93435551212'\r\n\t\t})\r\n\t\texpect(parseNumber('0343 15-555-1212', 'AR')).to.deep.equal({\r\n\t\t\tcountry: 'AR',\r\n\t\t\tphone: '93435551212'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should work with Mexico numbers', () => {\r\n\t\t// Fixed line.\r\n\t\texpect(parseNumber('+52 449 978 0001')).to.deep.equal({\r\n\t\t\tcountry: 'MX',\r\n\t\t\tphone: '4499780001'\r\n\t\t})\r\n\t\t// \"Dialling tokens 01, 02, 044, 045 and 1 are removed as they are\r\n\t\t//  no longer valid since August 2019.\"\r\n\t\t//\r\n\t\t// parseNumber('01 (449)978-0001', 'MX').should.deep.equal({\r\n\t\t// \tcountry: 'MX',\r\n\t\t// \tphone: '4499780001'\r\n\t\t// })\r\n\t\texpect(parseNumber('(449)978-0001', 'MX')).to.deep.equal({\r\n\t\t\tcountry: 'MX',\r\n\t\t\tphone: '4499780001'\r\n\t\t})\r\n\t\t// \"Dialling tokens 01, 02, 044, 045 and 1 are removed as they are\r\n\t\t//  no longer valid since August 2019.\"\r\n\t\t//\r\n\t\t// // Mobile.\r\n\t\t// // `1` is prepended before area code to mobile numbers in international format.\r\n\t\t// parseNumber('+52 1 33 1234-5678', 'MX').should.deep.equal({\r\n\t\t// \tcountry: 'MX',\r\n\t\t// \tphone: '3312345678'\r\n\t\t// })\r\n\t\texpect(parseNumber('+52 33 1234-5678', 'MX')).to.deep.equal({\r\n\t\t\tcountry: 'MX',\r\n\t\t\tphone: '3312345678'\r\n\t\t})\r\n\t\t// \"Dialling tokens 01, 02, 044, 045 and 1 are removed as they are\r\n\t\t//  no longer valid since August 2019.\"\r\n\t\t//\r\n\t\t// parseNumber('044 (33) 1234-5678', 'MX').should.deep.equal({\r\n\t\t// \tcountry: 'MX',\r\n\t\t// \tphone: '3312345678'\r\n\t\t// })\r\n\t\t// parseNumber('045 33 1234-5678', 'MX').should.deep.equal({\r\n\t\t// \tcountry: 'MX',\r\n\t\t// \tphone: '3312345678'\r\n\t\t// })\r\n\t})\r\n\r\n\tit('should parse non-geographic numbering plan phone numbers', () => {\r\n\t\texpect(parseNumber('+870773111632')).to.deep.equal(USE_NON_GEOGRAPHIC_COUNTRY_CODE ?\r\n        {\r\n            country: '001',\r\n            phone: '773111632'\r\n        } :\r\n        {})\r\n\t})\r\n\r\n\tit('should parse non-geographic numbering plan phone numbers (default country code)', () => {\r\n\t\texpect(parseNumber('773111632', { defaultCallingCode: '870' })).to.deep.equal(USE_NON_GEOGRAPHIC_COUNTRY_CODE ?\r\n        {\r\n            country: '001',\r\n            phone: '773111632'\r\n        } :\r\n        {})\r\n\t})\r\n\r\n\tit('should parse non-geographic numbering plan phone numbers (extended)', () => {\r\n\t\texpect(parseNumber('+870773111632', { extended: true })).to.deep.equal({\r\n\t\t\tcountry: USE_NON_GEOGRAPHIC_COUNTRY_CODE ? '001' : undefined,\r\n\t\t\tcountryCallingCode: '870',\r\n\t\t\tphone: '773111632',\r\n\t\t\tcarrierCode: undefined,\r\n\t\t\text: undefined,\r\n\t\t\tpossible: true,\r\n\t\t\tvalid: true\r\n\t\t})\r\n\t})\r\n\r\n\tit('should parse non-geographic numbering plan phone numbers (default country code) (extended)', () => {\r\n\t\texpect(parseNumber('773111632', { defaultCallingCode: '870', extended: true })).to.deep.equal({\r\n\t\t\tcountry: USE_NON_GEOGRAPHIC_COUNTRY_CODE ? '001' : undefined,\r\n\t\t\tcountryCallingCode: '870',\r\n\t\t\tphone: '773111632',\r\n\t\t\tcarrierCode: undefined,\r\n\t\t\text: undefined,\r\n\t\t\tpossible: true,\r\n\t\t\tvalid: true\r\n\t\t})\r\n\t})\r\n\r\n\tit('shouldn\\'t crash when invalid `defaultCallingCode` is passed', () => {\r\n\t\texpect(() => parseNumber('773111632', { defaultCallingCode: '999' })).to.throw('Unknown calling code')\r\n\t})\r\n\r\n\tit('shouldn\\'t set `country` when there\\'s no `defaultCountry` and `defaultCallingCode` is not of a \"non-geographic entity\"', () => {\r\n\t\texpect(parseNumber('88005553535', { defaultCallingCode: '7' })).to.deep.equal({\r\n\t\t\tcountry: 'RU',\r\n\t\t\tphone: '8005553535'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should correctly parse numbers starting with the same digit as the national prefix', () => {\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/373\r\n\t\t// `BY`'s `national_prefix` is `8`.\r\n\t\texpect(parseNumber('+37582004910060')).to.deep.equal({\r\n\t\t\tcountry: 'BY',\r\n\t\t\tphone: '82004910060'\r\n\t\t});\r\n\t})\r\n\r\n\tit('should autocorrect numbers without a leading +', () => {\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\texpect(parseNumber('375447521111', 'BY')).to.deep.equal({\r\n\t\t\tcountry: 'BY',\r\n\t\t\tphone: '447521111'\r\n\t\t});\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\texpect(parseNumber('33612902554', 'FR')).to.deep.equal({\r\n\t\t\tcountry: 'FR',\r\n\t\t\tphone: '612902554'\r\n\t\t});\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\texpect(parseNumber('61438331999', 'AU')).to.deep.equal({\r\n\t\t\tcountry: 'AU',\r\n\t\t\tphone: '438331999'\r\n\t\t});\r\n\t\t// A case when `49` is a country calling code of a number without a leading `+`.\r\n\t\texpect(parseNumber('4930123456', 'DE')).to.deep.equal({\r\n\t\t\tcountry: 'DE',\r\n\t\t\tphone: '30123456'\r\n\t\t});\r\n\t\t// A case when `49` is a valid area code.\r\n\t\texpect(parseNumber('4951234567890', 'DE')).to.deep.equal({\r\n\t\t\tcountry: 'DE',\r\n\t\t\tphone: '4951234567890'\r\n\t\t});\r\n\t})\r\n\r\n\tit('should parse extensions (long extensions with explicitl abels)', () => {\r\n\t\t// Test lower and upper limits of extension lengths for each type of label.\r\n\r\n\t\t// Firstly, when in RFC format: PhoneNumberUtil.extLimitAfterExplicitLabel\r\n\t\texpect(parseNumber('33316005 ext 0', 'NZ').ext).to.equal('0')\r\n\t\texpect(parseNumber('33316005 ext 01234567890123456789', 'NZ').ext).to.equal('01234567890123456789')\r\n\t\t// Extension too long.\r\n\t\texpect(parseNumber('33316005 ext 012345678901234567890', 'NZ').ext).to.be.undefined\r\n\r\n\t\t// Explicit extension label.\r\n\t\texpect(parseNumber('03 3316005ext:1', 'NZ').ext).to.equal('1')\r\n\t\texpect(parseNumber('03 3316005 xtn:12345678901234567890', 'NZ').ext).to.equal('12345678901234567890')\r\n\t\texpect(parseNumber('03 3316005 extension\\t12345678901234567890', 'NZ').ext).to.equal('12345678901234567890')\r\n\t\texpect(parseNumber('03 3316005 xtensio:12345678901234567890', 'NZ').ext).to.equal('12345678901234567890')\r\n\t\texpect(parseNumber('03 3316005 xtensión, 12345678901234567890#', 'NZ').ext).to.equal('12345678901234567890')\r\n\t\texpect(parseNumber('03 3316005extension.12345678901234567890', 'NZ').ext).to.equal('12345678901234567890')\r\n\t\texpect(parseNumber('03 3316005 доб:12345678901234567890', 'NZ').ext).to.equal('12345678901234567890')\r\n\r\n\t\t// Extension too long.\r\n\t\texpect(parseNumber('03 3316005 extension 123456789012345678901', 'NZ').ext).to.be.undefined\r\n\t})\r\n\r\n\tit('should parse extensions (long extensions with auto dialling labels)', () => {\r\n\t\texpect(parseNumber('+12679000000,,123456789012345#').ext).to.equal('123456789012345')\r\n\t\texpect(parseNumber('+12679000000;123456789012345#').ext).to.equal('123456789012345')\r\n\t\texpect(parseNumber('+442034000000,,123456789#').ext).to.equal('123456789')\r\n\t\t// Extension too long.\r\n\t\texpect(parseNumber('+12679000000,,1234567890123456#').ext).to.be.undefined\r\n\t})\r\n\r\n\tit('should parse extensions (short extensions with ambiguous characters)', () => {\r\n\t\texpect(parseNumber('03 3316005 x 123456789', 'NZ').ext).to.equal('123456789')\r\n\t\texpect(parseNumber('03 3316005 x. 123456789', 'NZ').ext).to.equal('123456789')\r\n\t\texpect(parseNumber('03 3316005 #123456789#', 'NZ').ext).to.equal('123456789')\r\n\t\texpect(parseNumber('03 3316005 ~ 123456789', 'NZ').ext).to.equal('123456789')\r\n\t\t// Extension too long.\r\n\t\texpect(parseNumber('03 3316005 ~ 1234567890', 'NZ').ext).to.be.undefined\r\n\t})\r\n\r\n\tit('should parse extensions (short extensions when not sure of label)', () => {\r\n\t\texpect(parseNumber('+1123-456-7890 666666#', { v2: true }).ext).to.equal('666666')\r\n\t\texpect(parseNumber('+11234567890-6#', { v2: true }).ext).to.equal('6')\r\n\t\t// Extension too long.\r\n\t\texpect(() => parseNumber('+1123-456-7890 7777777#', { v2: true })).to.throw('NOT_A_NUMBER')\r\n\t})\r\n\r\n\tit('should not choose `defaultCountry` over the \"main\" one when both the `defaultCountry` and the \"main\" one match the phone number', function() {\r\n\t\t// This phone number matches both US and CA because they have the same\r\n\t\t// regular expression for some weird reason.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/103\r\n\t\tconst phoneNumber = parseNumber('8004001000', { defaultCountry: 'CA', v2: true })\r\n\t\texpect(phoneNumber.country).not.to.equal('CA')\r\n\t\texpect(phoneNumber.country).to.equal('US')\r\n\r\n\t\t// This phone number is specific to CA.\r\n\t\tconst phoneNumber2 = parseNumber('4389999999', { defaultCountry: 'US', v2: true })\r\n\t\texpect(phoneNumber2.country).to.equal('CA')\r\n\t})\r\n})"],"mappings":";;;;;;AAAA,OAAOA,QAAQ,MAAM,sBAAsB,QAAQC,IAAI,EAAE,MAAM;AAC/D,OAAOC,YAAY,MAAM,YAAY;AACrC,OAAOC,QAAQ,MAAM,eAAe;AAEpC,SAASC,WAAWA,CAAA,EAAgB;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAZC,UAAU,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAVF,UAAU,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACjC,IAAIF,UAAU,CAACD,MAAM,GAAG,CAAC,EAAE;IAC1B;IACAC,UAAU,CAACG,IAAI,CAACC,SAAS,CAAC;EAC3B;EACA;EACA,IAAI,OAAOJ,UAAU,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IACtCA,UAAU,CAAC,CAAC,CAAC,GAAAK,aAAA,CAAAA,aAAA,KACTL,UAAU,CAAC,CAAC,CAAC;MAChBM,cAAc,EAAEN,UAAU,CAAC,CAAC;IAAC,EAC7B;EACF;EACA,IAAIA,UAAU,CAAC,CAAC,CAAC,EAAE;IAClBA,UAAU,CAAC,CAAC,CAAC,GAAGR,QAAQ;EACzB,CAAC,MAAM;IACNQ,UAAU,CAACG,IAAI,CAACX,QAAQ,CAAC;EAC1B;EACA,OAAOE,YAAY,CAACa,KAAK,CAAC,IAAI,EAAEP,UAAU,CAAC;AAC5C;AAEA,IAAMQ,+BAA+B,GAAG,KAAK;AAE7CC,QAAQ,CAAC,OAAO,EAAE,YAAM;EACvBC,EAAE,CAAC,wCAAwC,EAAE,YAAM;IAClD;IACAC,MAAM,CAACf,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1D;IACAH,MAAM,CAACf,WAAW,CAAC,sBAAsB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAE7DH,MAAM,CAACf,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChEH,MAAM,CAACf,WAAW,CAAC,gBAAgB,EAAE;MAAEU,cAAc,EAAE;IAAK,CAAC,CAAC,CAAC,CAACM,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IACjFH,MAAM,CAACf,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAE9DH,MAAM,CAACf,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACzD,CAAC,CAAC;EAEFJ,EAAE,CAAC,kCAAkC,EAAE,YAAM;IAC5C;IACA;IACA;IACA;IACAC,MAAM,CAACf,WAAW,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;IAC5G;IACAL,MAAM,CAACf,WAAW,CAAC,4BAA4B,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;IACvG;IACA;IACA;IACAL,MAAM,CAACf,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;IAClG;IACAL,MAAM,CAACf,WAAW,CAAC,mBAAmB,EAAE;MAAEU,cAAc,EAAE;IAAK,CAAC,CAAC,CAAC,CAACM,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;;IAExH;IACAL,MAAM,CAACf,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;;IAE5F;IACAL,MAAM,CAACf,WAAW,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAY,CAAC,CAAC;;IAE/F;IACAL,MAAM,CAACf,WAAW,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAc,CAAC,CAAC;;IAEjG;IACAL,MAAM,CAACf,WAAW,CAAC,cAAc,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAY,CAAC,CAAC;;IAExF;IACAL,MAAM,CAACf,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;;IAE5F;IACAL,MAAM,CAACf,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;;IAE5F;IACAL,MAAM,CAACf,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAc,CAAC,CAAC;;IAE/F;IACAL,MAAM,CAACf,WAAW,CAAC,eAAe,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAY,CAAC,CAAC;;IAEzF;IACA;;IAEA;IACAL,MAAM,CAACf,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;EAC/F,CAAC,CAAC;EAEFN,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACzC;IACAC,MAAM,CAACf,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACzEC,OAAO,EAAc,IAAI;MACzBG,kBAAkB,EAAG,GAAG;MACxBF,KAAK,EAAgB,YAAY;MACjCG,WAAW,EAAUf,SAAS;MAC9BgB,GAAG,EAAkBhB,SAAS;MAC9BiB,KAAK,EAAgB,KAAK;MAC1BC,QAAQ,EAAa;IACtB,CAAC,CAAC;;IAEF;IACA;IACAX,MAAM,CAACf,WAAW,CAAC,cAAc,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IACrDH,MAAM,CAACf,WAAW,CAAC,cAAc,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACrEC,OAAO,EAAcX,SAAS;MAC9Bc,kBAAkB,EAAG,GAAG;MACxBF,KAAK,EAAgB,YAAY;MACjCG,WAAW,EAAUf,SAAS;MAC9BgB,GAAG,EAAkBhB,SAAS;MAC9BiB,KAAK,EAAgB,KAAK;MAC1BC,QAAQ,EAAa;IACtB,CAAC,CAAC;;IAEF;IACA;IACAX,MAAM,CAACf,WAAW,CAAC,cAAc,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACrEC,OAAO,EAAc,IAAI;MACzBG,kBAAkB,EAAG,IAAI;MACzBF,KAAK,EAAgB,WAAW;MAChCG,WAAW,EAAUf,SAAS;MAC9BgB,GAAG,EAAkBhB,SAAS;MAC9BiB,KAAK,EAAgB,KAAK;MAC1BC,QAAQ,EAAa;IACtB,CAAC,CAAC;;IAEF;IACA;IACAX,MAAM,CAACf,WAAW,CAAC,mBAAmB,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC1EC,OAAO,EAAcX,SAAS;MAC9Bc,kBAAkB,EAAG,GAAG;MACxBF,KAAK,EAAgB,WAAW;MAChCG,WAAW,EAAUf,SAAS;MAC9BgB,GAAG,EAAkBhB,SAAS;MAC9BiB,KAAK,EAAgB,KAAK;MAC1BC,QAAQ,EAAa;IACtB,CAAC,CAAC;;IAEF;IACAX,MAAM,CAACf,WAAW,CAAC,iBAAiB,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACxEC,OAAO,EAAcX,SAAS;MAC9Bc,kBAAkB,EAAG,GAAG;MACxBF,KAAK,EAAgB,aAAa;MAClCG,WAAW,EAAUf,SAAS;MAC9BgB,GAAG,EAAkBhB,SAAS;MAC9BiB,KAAK,EAAgB,KAAK;MAC1BC,QAAQ,EAAa;IACtB,CAAC,CAAC;;IAEF;IACAX,MAAM,CAACf,WAAW,CAAC,MAAM,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC7D;IAAA,CACA,CAAC;;IAEF;IACAH,MAAM,CAACf,WAAW,CAAC,cAAc,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACrEC,OAAO,EAAc,IAAI;MACzBG,kBAAkB,EAAG,GAAG;MACxBF,KAAK,EAAgB,YAAY;MACjCG,WAAW,EAAUf,SAAS;MAC9BgB,GAAG,EAAkBhB,SAAS;MAC9BiB,KAAK,EAAgB,IAAI;MACzBC,QAAQ,EAAa;IACtB,CAAC,CAAC;;IAEF;IACAX,MAAM,CAACf,WAAW,CAAC,MAAM,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IACjEH,MAAM,CAACf,WAAW,CAAC,OAAO,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClEH,MAAM,CAACf,WAAW,CAAC,QAAQ,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC/DK,WAAW,EAAUf,SAAS;MAC9BY,KAAK,EAAgB,IAAI;MACzBI,GAAG,EAAkBhB,SAAS;MAC9BW,OAAO,EAAc,IAAI;MACzBG,kBAAkB,EAAG,KAAK;MAC1BI,QAAQ,EAAa,KAAK;MAC1BD,KAAK,EAAgB;IACtB,CAAC,CAAC;EACH,CAAC,CAAC;EAEFX,EAAE,CAAC,kCAAkC,EAAE,YAAM;IAC5CC,MAAM,CAACf,WAAW,CAAC,cAAc,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;EAC1F,CAAC,CAAC;EAEFN,EAAE,CAAC,2BAA2B,EAAE,YAAM;IACrC,IAAIa,OAAO;;IAEX;IACAZ,MAAM,CAACf,WAAW,CAAC,EAAE,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAEzC;IACAH,MAAM,CAACf,WAAW,CAAC,GAAG,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAE1C;IACAH,MAAM,CAACf,WAAW,CAAC,KAAK,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAE5C;IACAS,OAAO,GAAG,SAAVA,OAAOA,CAAA;MAAA,OAAS3B,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC;IAAA;IACxCe,MAAM,CAACY,OAAO,CAAC,CAACX,EAAE,SAAM,CAAC,iBAAiB,CAAC;;IAE3C;IACAW,OAAO,GAAG,SAAVA,OAAOA,CAAA;MAAA,OAAS3B,WAAW,CAAC,KAAK,EAAE;QAAEU,cAAc,EAAE;MAAK,CAAC,CAAC;IAAA;IAC5DK,MAAM,CAACY,OAAO,CAAC,CAACX,EAAE,SAAM,CAAC,iBAAiB,CAAC;;IAE3C;IACAD,MAAM,CAACf,WAAW,CAAC,MAAM,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAE7C;IACAH,MAAM,CAACf,WAAW,CAAC,MAAM,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAEjE;IACAH,MAAM,CAACf,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAEpE;IACAH,MAAM,CAACf,WAAW,CAAC,qBAAqB,EAAE,IAAI,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAEtF;IACAH,MAAM,CAACf,WAAW,CAAC,SAAS,EAAE,IAAI,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAE1E;IACAH,MAAM,CAACf,WAAW,CAAC,OAAO,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAE9C;IACAH,MAAM,CAACf,WAAW,CAAC,cAAc,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAa,CAAC,CAAC;;IAEzF;IACA;IACA;;IAEA;IACAL,MAAM,CAACf,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAEhD;IACAH,MAAM,CAACf,WAAW,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAEjE;IACAH,MAAM,CAACf,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAO,CAAC,CAAC;;IAElF;IACA;IACAL,MAAM,CAACf,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAc,CAAC,CAAC;;IAE7F;IACAO,OAAO,GAAG,SAAVA,OAAOA,CAAA;MAAA,OAAS7B,YAAY,CAAC,EAAE,CAAC;IAAA;IAChCiB,MAAM,CAACY,OAAO,CAAC,CAACX,EAAE,SAAM,CAAC,gCAAgC,CAAC;;IAE1D;IACA;IACA;;IAEA;IACAD,MAAM,CACIf,WAAW,CAAC,6PAA6P,EAAE,IAAI,CACnR,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC;EAEFJ,EAAE,CAAC,sCAAsC,EAAE,YAAM;IAChD;IACAC,MAAM,CAACf,WAAW,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC7DC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK,YAAY;MACtBI,GAAG,EAAO;IACX,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACf,WAAW,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAClEC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK,YAAY;MACtBI,GAAG,EAAO;IACX,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACf,WAAW,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACjEC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK,YAAY;MACtBI,GAAG,EAAO;IACX,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACf,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACtDC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK,YAAY;MACtBI,GAAG,EAAO;IACX,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACf,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACvDC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK,YAAY;MACtBI,GAAG,EAAO;IACX,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACf,WAAW,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC9DC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK;IACX,CAAC,CAAC;EACH,CAAC,CAAC;EAEFN,EAAE,CAAC,qCAAqC,EAAE,YAAM;IAC/CC,MAAM,CAACf,WAAW,CAAC,0BAA0B,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC7DC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK,YAAY;MACtBI,GAAG,EAAO;IACX,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACf,WAAW,CAAC,8BAA8B,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACjEC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK,YAAY;MACtBI,GAAG,EAAO;IACX,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACf,WAAW,CAAC,2BAA2B,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACnE,CAAC,CAAC;EAEFJ,EAAE,CAAC,qEAAqE,EAAE,YAAM;IAC/EC,MAAM,CAACf,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC1DC,OAAO,EAAG,IAAI;MACdC,KAAK,EAAK;IACX,CAAC,CAAC;EACH,CAAC,CAAC;EAEFN,EAAE,CAAC,4BAA4B,EAAE,YAAM;IACtCC,MAAM,CAACf,WAAW,CAAC,mBAAmB,EAAE,IAAI,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAChFC,OAAO,EAAc,IAAI;MACzBG,kBAAkB,EAAG,IAAI;MACzBF,KAAK,EAAgB,YAAY;MACjCG,WAAW,EAAU,IAAI;MACzBC,GAAG,EAAkBhB,SAAS;MAC9BiB,KAAK,EAAgB,IAAI;MACzBC,QAAQ,EAAa;IACtB,CAAC,CAAC;EACH,CAAC,CAAC;EAEFZ,EAAE,CAAC,2BAA2B,EAAE,YAAM;IACrCC,MAAM,CAACf,WAAW,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC7DE,KAAK,EAAK,WAAW;MACrBD,OAAO,EAAG;IACX,CAAC,CAAC;IAEFJ,MAAM,CAACf,WAAW,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEjEH,MAAM,CAACf,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEhEH,MAAM,CAACf,WAAW,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC7DE,KAAK,EAAK,WAAW;MACrBD,OAAO,EAAG;IACX,CAAC,CAAC;EACH,CAAC,CAAC;EAEFL,EAAE,CAAC,yBAAyB,EAAE,YAAM;IACnCd,WAAW,CAAC,iBAAiB,CAAC;EAC/B,CAAC,CAAC;EAEFc,EAAE,CAAC,oCAAoC,EAAE,YAAM;IAC9C;IACA;IACA;IACAC,MAAM,CAACf,WAAW,CAAC,oBAAoB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACvDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;IACFL,MAAM,CAACf,WAAW,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC3DC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFN,EAAE,CAAC,iCAAiC,EAAE,YAAM;IAC3C;IACAC,MAAM,CAACf,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACrDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACAL,MAAM,CAACf,WAAW,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACxDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAL,MAAM,CAACf,WAAW,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC3DC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD,CAAC,CAAC;EAEFN,EAAE,CAAC,0DAA0D,EAAE,YAAM;IACpEC,MAAM,CAACf,WAAW,CAAC,eAAe,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAACN,+BAA+B,GAC5E;MACIO,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACX,CAAC,GACD,CAAC,CAAC,CAAC;EACV,CAAC,CAAC;EAEFN,EAAE,CAAC,iFAAiF,EAAE,YAAM;IAC3FC,MAAM,CAACf,WAAW,CAAC,WAAW,EAAE;MAAE4B,kBAAkB,EAAE;IAAM,CAAC,CAAC,CAAC,CAACZ,EAAE,CAACC,IAAI,CAACC,KAAK,CAACN,+BAA+B,GACvG;MACIO,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACX,CAAC,GACD,CAAC,CAAC,CAAC;EACV,CAAC,CAAC;EAEFN,EAAE,CAAC,qEAAqE,EAAE,YAAM;IAC/EC,MAAM,CAACf,WAAW,CAAC,eAAe,EAAE;MAAEqB,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACtEC,OAAO,EAAEP,+BAA+B,GAAG,KAAK,GAAGJ,SAAS;MAC5Dc,kBAAkB,EAAE,KAAK;MACzBF,KAAK,EAAE,WAAW;MAClBG,WAAW,EAAEf,SAAS;MACtBgB,GAAG,EAAEhB,SAAS;MACdkB,QAAQ,EAAE,IAAI;MACdD,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFX,EAAE,CAAC,4FAA4F,EAAE,YAAM;IACtGC,MAAM,CAACf,WAAW,CAAC,WAAW,EAAE;MAAE4B,kBAAkB,EAAE,KAAK;MAAEP,QAAQ,EAAE;IAAK,CAAC,CAAC,CAAC,CAACL,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC7FC,OAAO,EAAEP,+BAA+B,GAAG,KAAK,GAAGJ,SAAS;MAC5Dc,kBAAkB,EAAE,KAAK;MACzBF,KAAK,EAAE,WAAW;MAClBG,WAAW,EAAEf,SAAS;MACtBgB,GAAG,EAAEhB,SAAS;MACdkB,QAAQ,EAAE,IAAI;MACdD,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFX,EAAE,CAAC,8DAA8D,EAAE,YAAM;IACxEC,MAAM,CAAC;MAAA,OAAMf,WAAW,CAAC,WAAW,EAAE;QAAE4B,kBAAkB,EAAE;MAAM,CAAC,CAAC;IAAA,EAAC,CAACZ,EAAE,SAAM,CAAC,sBAAsB,CAAC;EACvG,CAAC,CAAC;EAEFF,EAAE,CAAC,yHAAyH,EAAE,YAAM;IACnIC,MAAM,CAACf,WAAW,CAAC,aAAa,EAAE;MAAE4B,kBAAkB,EAAE;IAAI,CAAC,CAAC,CAAC,CAACZ,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MAC7EC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFN,EAAE,CAAC,oFAAoF,EAAE,YAAM;IAC9F;IACA;IACAC,MAAM,CAACf,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACpDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFN,EAAE,CAAC,gDAAgD,EAAE,YAAM;IAC1D;IACAC,MAAM,CAACf,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACvDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;IACF;IACAL,MAAM,CAACf,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACtDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;IACF;IACAL,MAAM,CAACf,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACtDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;IACF;IACAL,MAAM,CAACf,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACrDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;IACF;IACAL,MAAM,CAACf,WAAW,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAACgB,EAAE,CAACC,IAAI,CAACC,KAAK,CAAC;MACxDC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFN,EAAE,CAAC,gEAAgE,EAAE,YAAM;IAC1E;;IAEA;IACAC,MAAM,CAACf,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,GAAG,CAAC;IAC7DH,MAAM,CAACf,WAAW,CAAC,mCAAmC,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,sBAAsB,CAAC;IACnG;IACAH,MAAM,CAACf,WAAW,CAAC,oCAAoC,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACa,EAAE,CAACrB,SAAS;;IAEnF;IACAO,MAAM,CAACf,WAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,GAAG,CAAC;IAC9DH,MAAM,CAACf,WAAW,CAAC,qCAAqC,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,sBAAsB,CAAC;IACrGH,MAAM,CAACf,WAAW,CAAC,4CAA4C,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,sBAAsB,CAAC;IAC5GH,MAAM,CAACf,WAAW,CAAC,yCAAyC,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,sBAAsB,CAAC;IACzGH,MAAM,CAACf,WAAW,CAAC,4CAA4C,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,sBAAsB,CAAC;IAC5GH,MAAM,CAACf,WAAW,CAAC,0CAA0C,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,sBAAsB,CAAC;IAC1GH,MAAM,CAACf,WAAW,CAAC,qCAAqC,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,sBAAsB,CAAC;;IAErG;IACAH,MAAM,CAACf,WAAW,CAAC,4CAA4C,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACa,EAAE,CAACrB,SAAS;EAC5F,CAAC,CAAC;EAEFM,EAAE,CAAC,qEAAqE,EAAE,YAAM;IAC/EC,MAAM,CAACf,WAAW,CAAC,gCAAgC,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,iBAAiB,CAAC;IACrFH,MAAM,CAACf,WAAW,CAAC,+BAA+B,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,iBAAiB,CAAC;IACpFH,MAAM,CAACf,WAAW,CAAC,2BAA2B,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,WAAW,CAAC;IAC1E;IACAH,MAAM,CAACf,WAAW,CAAC,iCAAiC,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACa,EAAE,CAACrB,SAAS;EAC3E,CAAC,CAAC;EAEFM,EAAE,CAAC,sEAAsE,EAAE,YAAM;IAChFC,MAAM,CAACf,WAAW,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,WAAW,CAAC;IAC7EH,MAAM,CAACf,WAAW,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,WAAW,CAAC;IAC9EH,MAAM,CAACf,WAAW,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,WAAW,CAAC;IAC7EH,MAAM,CAACf,WAAW,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,WAAW,CAAC;IAC7E;IACAH,MAAM,CAACf,WAAW,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAACwB,GAAG,CAAC,CAACR,EAAE,CAACa,EAAE,CAACrB,SAAS;EACzE,CAAC,CAAC;EAEFM,EAAE,CAAC,mEAAmE,EAAE,YAAM;IAC7EC,MAAM,CAACf,WAAW,CAAC,wBAAwB,EAAE;MAAE8B,EAAE,EAAE;IAAK,CAAC,CAAC,CAACN,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,QAAQ,CAAC;IAClFH,MAAM,CAACf,WAAW,CAAC,iBAAiB,EAAE;MAAE8B,EAAE,EAAE;IAAK,CAAC,CAAC,CAACN,GAAG,CAAC,CAACR,EAAE,CAACE,KAAK,CAAC,GAAG,CAAC;IACtE;IACAH,MAAM,CAAC;MAAA,OAAMf,WAAW,CAAC,yBAAyB,EAAE;QAAE8B,EAAE,EAAE;MAAK,CAAC,CAAC;IAAA,EAAC,CAACd,EAAE,SAAM,CAAC,cAAc,CAAC;EAC5F,CAAC,CAAC;EAEFF,EAAE,CAAC,iIAAiI,EAAE,YAAW;IAChJ;IACA;IACA;IACA,IAAMiB,WAAW,GAAG/B,WAAW,CAAC,YAAY,EAAE;MAAEU,cAAc,EAAE,IAAI;MAAEoB,EAAE,EAAE;IAAK,CAAC,CAAC;IACjFf,MAAM,CAACgB,WAAW,CAACZ,OAAO,CAAC,CAACa,GAAG,CAAChB,EAAE,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9CH,MAAM,CAACgB,WAAW,CAACZ,OAAO,CAAC,CAACH,EAAE,CAACE,KAAK,CAAC,IAAI,CAAC;;IAE1C;IACA,IAAMe,YAAY,GAAGjC,WAAW,CAAC,YAAY,EAAE;MAAEU,cAAc,EAAE,IAAI;MAAEoB,EAAE,EAAE;IAAK,CAAC,CAAC;IAClFf,MAAM,CAACkB,YAAY,CAACd,OAAO,CAAC,CAACH,EAAE,CAACE,KAAK,CAAC,IAAI,CAAC;EAC5C,CAAC,CAAC;AACH,CAAC,CAAC","ignoreList":[]}