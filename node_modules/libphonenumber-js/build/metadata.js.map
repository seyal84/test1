{"version":3,"file":"metadata.js","names":["_semverCompare","_interopRequireDefault","require","_isObject","e","__esModule","_readOnlyError","r","TypeError","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","a","n","_defineProperties","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","i","_toPrimitive","toPrimitive","call","String","Number","V2","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","exports","metadata","validateMetadata","setVersion","value","getCountries","keys","countries","filter","_","getCountryMetadata","countryCode","nonGeographic","v1","v2","v3","nonGeographical","hasCountry","country","undefined","hasCallingCode","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","isNonGeographicCallingCode","selectNumberingPlan","test","Error","concat","numberingPlan","NumberingPlan","getNumberingPlanMetadata","getCountryCodeForCallingCode","countryCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","type","ext","country_phone_code_to_countries","country_calling_codes","chooseCountryByCountryCallingCode","hasSelectedNumberingPlan","globalMetadataObject","getDefaultCountryMetadataForRegion","_getFormats","_this","map","Format","nationalPrefix","_getNationalPrefixFormattingRule","nationalPrefixFormattingRule","_nationalPrefixForParsing","_getNationalPrefixIsOptionalWhenFormatting","nationalPrefixIsOptionalWhenFormattingInNationalFormat","types","getType","Type","format","_format","pattern","leadingDigitsPatterns","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","internationalFormat","isObject","join","typeOf","getExtPrefix","getCountryCallingCode","isSupportedCountry","hasOwnProperty","version","v4","compare"],"sources":["../source/metadata.js"],"sourcesContent":["import compare from './tools/semver-compare.js'\r\nimport isObject from './helpers/isObject.js'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\t// The test case could be found by searching for \"nonGeographical\".\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\t// In that metadata, there was no concept of \"non-geographic\" metadata\r\n\t\t\t// so metadata for `001` country code was stored along with other countries.\r\n\t\t\t// The test case can be found by searching for:\r\n\t\t\t// \"should work around `nonGeographic` metadata not existing\".\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// \"possible length\" data is always present in Google's metadata.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to `country_calling_codes` in `1.0.18`.\r\n\t// For that reason, it's not used in this detection algorithm.\r\n\t// Instead, it detects by `countries: {}` property existence.\r\n\tif (!isObject(metadata) || !isObject(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${isObject(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + typeOf(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst typeOf = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries.hasOwnProperty(country)\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }"],"mappings":"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","ignoreList":[]}