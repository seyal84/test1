{"version":3,"file":"findPhoneNumbers.test.js","names":["findNumbers","searchPhoneNumbers","PhoneNumberSearch","metadata","type","describe","it","expect","to","deep","equal","phone","country","startsAt","endsAt","leniency","ext","expected_numbers","_iterator","_createForOfIteratorHelperLoose","_step","done","number","value","shift","length","thrower","possibleNumbers","extended","finder","defaultCountry","hasNext","next","undefined","search"],"sources":["../../source/legacy/findPhoneNumbers.test.js"],"sourcesContent":["// This is a legacy function.\r\n// Use `findNumbers()` instead.\r\n\r\nimport findNumbers, { searchPhoneNumbers } from './findPhoneNumbers.js'\r\nimport { PhoneNumberSearch } from './findPhoneNumbersInitialImplementation.js'\r\nimport metadata from '../../metadata.min.json' with { type: 'json' }\r\n\r\ndescribe('findPhoneNumbers', () => {\r\n\tit('should find numbers', () => {\r\n\t\texpect(findNumbers('2133734253', 'US', metadata)).to.deep.equal([{\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 10\r\n\t\t}])\r\n\r\n\t\texpect(findNumbers('(213) 373-4253', 'US', metadata)).to.deep.equal([{\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 14\r\n\t\t}])\r\n\r\n\t\texpect(\r\n            findNumbers('The number is +7 (800) 555-35-35 and not (213) 373-4253 as written in the document.', 'US', metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}, {\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 41,\r\n\t\t\tendsAt   : 55\r\n\t\t}])\r\n\r\n\t\t// Opening parenthesis issue.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\texpect(\r\n            findNumbers('The number is +7 (800) 555-35-35 and not (213) 373-4253 (that\\'s not even in the same country!) as written in the document.', 'US', metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}, {\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 41,\r\n\t\t\tendsAt   : 55\r\n\t\t}])\r\n\r\n\t\t// No default country.\r\n\t\texpect(\r\n            findNumbers('The number is +7 (800) 555-35-35 as written in the document.', metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Passing `options` and default country.\r\n\t\texpect(\r\n            findNumbers('The number is +7 (800) 555-35-35 as written in the document.', 'US', { leniency: 'VALID' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Passing `options`.\r\n\t\texpect(\r\n            findNumbers('The number is +7 (800) 555-35-35 as written in the document.', { leniency: 'VALID' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Not a phone number and a phone number.\r\n\t\texpect(\r\n            findNumbers('Digits 12 are not a number, but +7 (800) 555-35-35 is.', { leniency: 'VALID' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 32,\r\n\t\t\tendsAt   : 50\r\n\t\t}])\r\n\r\n\t\t// Phone number extension.\r\n\t\texpect(\r\n            findNumbers('Date 02/17/2018 is not a number, but +7 (800) 555-35-35 ext. 123 is.', { leniency: 'VALID' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\text      : '123',\r\n\t\t\tstartsAt : 37,\r\n\t\t\tendsAt   : 64\r\n\t\t}])\r\n\t})\r\n\r\n\tit('shouldn\\'t find non-valid numbers', () => {\r\n\t\t// Not a valid phone number for US.\r\n\t\texpect(findNumbers('1111111111', 'US', metadata)).to.deep.equal([])\r\n\t})\r\n\r\n\tit('should find non-European digits', () => {\r\n\t\t// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n\t\texpect(findNumbers('العَرَبِيَّة‎ +٤٤٣٣٣٣٣٣٣٣٣٣عَرَبِيّ‎', metadata)).to.deep.equal([{\r\n\t\t\tcountry  : 'GB',\r\n\t\t\tphone    : '3333333333',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 27\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should iterate', () => {\r\n\t\tconst expected_numbers = [{\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\t// number   : '+7 (800) 555-35-35',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}, {\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2133734253',\r\n\t\t\t// number   : '(213) 373-4253',\r\n\t\t\tstartsAt : 41,\r\n\t\t\tendsAt   : 55\r\n\t\t}]\r\n\r\n\t\tfor (const number of searchPhoneNumbers('The number is +7 (800) 555-35-35 and not (213) 373-4253 as written in the document.', 'US', metadata)) {\r\n\t\t\texpect(number).to.deep.equal(expected_numbers.shift())\r\n\t\t}\r\n\r\n\t\texpect(expected_numbers.length).to.equal(0)\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\tlet thrower\r\n\r\n\t\t// No input\r\n\t\texpect(findNumbers('', metadata)).to.deep.equal([])\r\n\r\n\t\t// No country metadata for this `require` country code\r\n\t\tthrower = () => findNumbers('123', 'ZZ', metadata)\r\n\t\texpect(thrower).to.throw('Unknown country')\r\n\r\n\t\t// Numerical `value`\r\n\t\tthrower = () => findNumbers(2141111111, 'US')\r\n\t\texpect(thrower).to.throw('A text for parsing must be a string.')\r\n\r\n\t\t// // No metadata\r\n\t\t// thrower = () => findNumbers('')\r\n\t\t// thrower.should.throw('`metadata` argument not passed')\r\n\t})\r\n\r\n\tit('shouldn\\'t find phone numbers which are not phone numbers', () => {\r\n\t\t// A timestamp.\r\n\t\texpect(findNumbers('2012-01-02 08:00', 'US', metadata)).to.deep.equal([])\r\n\r\n\t\t// A valid number (not a complete timestamp).\r\n\t\texpect(findNumbers('2012-01-02 08', 'US', metadata)).to.deep.equal([{\r\n\t\t\tcountry  : 'US',\r\n\t\t\tphone    : '2012010208',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 13\r\n\t\t}])\r\n\r\n\t\t// Invalid parens.\r\n\t\texpect(findNumbers('213(3734253', 'US', metadata)).to.deep.equal([])\r\n\r\n\t\t// Letters after phone number.\r\n\t\texpect(findNumbers('2133734253a', 'US', metadata)).to.deep.equal([])\r\n\r\n\t\t// Valid phone (same as the one found in the UUID below).\r\n\t\texpect(findNumbers('The phone number is 231354125.', 'FR', metadata)).to.deep.equal([{\r\n\t\t\tcountry  : 'FR',\r\n\t\t\tphone    : '231354125',\r\n\t\t\tstartsAt : 20,\r\n\t\t\tendsAt   : 29\r\n\t\t}])\r\n\r\n\t\t// Not a phone number (part of a UUID).\r\n\t\t// Should parse in `{ extended: true }` mode.\r\n\t\tconst possibleNumbers = findNumbers('The UUID is CA801c26f98cd16e231354125ad046e40b.', 'FR', { extended: true }, metadata)\r\n\t\texpect(possibleNumbers.length).to.equal(3)\r\n\t\texpect(possibleNumbers[1].country).to.equal('FR')\r\n\t\texpect(possibleNumbers[1].phone).to.equal('231354125')\r\n\r\n\t\t// Not a phone number (part of a UUID).\r\n\t\t// Shouldn't parse by default.\r\n\t\texpect(\r\n            findNumbers('The UUID is CA801c26f98cd16e231354125ad046e40b.', 'FR', metadata)\r\n        ).to.deep.equal([])\r\n\t})\r\n})\r\n\r\ndescribe('PhoneNumberSearch', () => {\r\n\tit('should search for phone numbers', () => {\r\n\t\tconst finder = new PhoneNumberSearch('The number is +7 (800) 555-35-35 and not (213) 373-4253 as written in the document.', { defaultCountry: 'US' }, metadata)\r\n\r\n\t\texpect(finder.hasNext()).to.equal(true)\r\n\t\texpect(finder.next()).to.deep.equal({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\t// number   : '+7 (800) 555-35-35',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t})\r\n\r\n\t\texpect(finder.hasNext()).to.equal(true)\r\n\t\texpect(finder.next()).to.deep.equal({\r\n\t\t\tcountry : 'US',\r\n\t\t\tphone   : '2133734253',\r\n\t\t\t// number   : '(213) 373-4253',\r\n\t\t\tstartsAt : 41,\r\n\t\t\tendsAt   : 55\r\n\t\t})\r\n\r\n\t\texpect(finder.hasNext()).to.equal(false)\r\n\t})\r\n\r\n\tit('should search for phone numbers (no options)', () => {\r\n\t\tconst finder = new PhoneNumberSearch('The number is +7 (800) 555-35-35', undefined, metadata)\r\n\t\texpect(finder.hasNext()).to.equal(true)\r\n\t\texpect(finder.next()).to.deep.equal({\r\n\t\t\tcountry : 'RU',\r\n\t\t\tphone   : '8005553535',\r\n\t\t\t// number   : '+7 (800) 555-35-35',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t})\r\n\t\texpect(finder.hasNext()).to.equal(false)\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\t// No options\r\n\t\tconst search = new PhoneNumberSearch('', undefined, metadata)\r\n\r\n\t\t// No next element\r\n\t\tlet thrower = () => search.next()\r\n\t\texpect(thrower).to.throw('No next element')\r\n\t})\r\n})"],"mappings":"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","ignoreList":[]}