{"version":3,"file":"PhoneNumber.js","names":["_metadata","_interopRequireWildcard","require","_isPossible","_interopRequireDefault","_isValid","_getNumberType","_getPossibleCountriesForNumber","_extractCountryCallingCode","_isObject","_format2","e","__esModule","t","WeakMap","r","n","o","i","f","__proto__","_typeof","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","Symbol","iterator","constructor","prototype","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","value","configurable","writable","_classCallCheck","a","TypeError","_defineProperties","key","_createClass","_toPrimitive","toPrimitive","String","Number","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber","exports","countryOrCountryCallingCode","nationalNumber","metadata","isObject","countries","e164Number","E164_NUMBER_REGEXP","test","Error","_extractCountryCallin","extractCountryCallingCode","undefined","countryCallingCode","number","validateMetadata","_getCountryAndCountry","getCountryAndCountryCallingCode","country","getMetadata","setExt","ext","getPossibleCountries","getPossibleCountriesForNumber","isPossible","isPossibleNumber","v2","isValid","isValidNumber","isNonGeographic","Metadata","isNonGeographicCallingCode","isEqual","phoneNumber","getType","getNumberType","format","options","formatNumber","formatNational","formatInternational","getURI","isCountryCode","metadataJson","selectNumberingPlan"],"sources":["../source/PhoneNumber.js"],"sourcesContent":["import Metadata, { validateMetadata } from './metadata.js'\r\nimport isPossibleNumber from './isPossible.js'\r\nimport isValidNumber from './isValid.js'\r\n// import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport isObject from './helpers/isObject.js'\r\nimport formatNumber from './format.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\t/**\r\n\t * @param  {string} countryOrCountryCallingCode\r\n\t * @param  {string} nationalNumber\r\n\t * @param  {object} metadata â€” Metadata JSON\r\n\t * @return {PhoneNumber}\r\n\t */\r\n\tconstructor(countryOrCountryCallingCode, nationalNumber, metadata) {\r\n\t\t// Validate `countryOrCountryCallingCode` argument.\r\n\t\tif (!countryOrCountryCallingCode) {\r\n\t\t\tthrow new TypeError('First argument is required')\r\n\t\t}\r\n\t\tif (typeof countryOrCountryCallingCode !== 'string') {\r\n\t\t\tthrow new TypeError('First argument must be a string')\r\n\t\t}\r\n\r\n\t\t// In case of public API use: `constructor(number, metadata)`.\r\n\t\t// Transform the arguments from `constructor(number, metadata)` to\r\n\t\t// `constructor(countryOrCountryCallingCode, nationalNumber, metadata)`.\r\n\t\tif (countryOrCountryCallingCode[0] === '+' && !nationalNumber) {\r\n\t\t\tthrow new TypeError('`metadata` argument not passed')\r\n\t\t}\r\n\t\tif (isObject(nationalNumber) && isObject(nationalNumber.countries)) {\r\n\t\t\tmetadata = nationalNumber\r\n\t\t\tconst e164Number = countryOrCountryCallingCode\r\n\t\t\tif (!E164_NUMBER_REGEXP.test(e164Number)) {\r\n\t\t\t\tthrow new Error('Invalid `number` argument passed: must consist of a \"+\" followed by digits')\r\n\t\t\t}\r\n\t\t\tconst { countryCallingCode, number } = extractCountryCallingCode(e164Number, undefined, undefined, metadata)\r\n\t\t\tnationalNumber = number\r\n\t\t\tcountryOrCountryCallingCode = countryCallingCode\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\tthrow new Error('Invalid `number` argument passed: too short')\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `nationalNumber` argument.\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument is required')\r\n\t\t}\r\n\t\tif (typeof nationalNumber !== 'string') {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument must be a string')\r\n\t\t}\r\n\r\n\t\t// Validate `metadata` argument.\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\t// Initialize properties.\r\n\t\tconst { country, countryCallingCode } = getCountryAndCountryCallingCode(\r\n\t\t\tcountryOrCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tthis.country = country\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\t// Exclude `metadata` property output from `PhoneNumber.toString()`\r\n\t\t// so that it doesn't clutter the console output of Node.js.\r\n\t\t// Previously, when Node.js did `console.log(new PhoneNumber(...))`,\r\n\t\t// it would output the whole internal structure of the `metadata` object.\r\n\t\tthis.getMetadata = () => metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tgetPossibleCountries() {\r\n\t\tif (this.country) {\r\n\t\t\treturn [this.country]\r\n\t\t}\r\n\t\treturn getPossibleCountriesForNumber(\r\n\t\t\tthis.countryCallingCode,\r\n\t\t\tthis.nationalNumber,\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.getMetadata())\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\r\n\t// but later it was found out that it doesn't include the possible `TOO_SHORT` result\r\n\t// returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\r\n\t// so eventually I simply commented out this method from the `PhoneNumber` class\r\n\t// and just left the `validatePhoneNumberLength()` function, even though that one would require\r\n\t// and additional step to also validate the actual country / calling code of the phone number.\r\n\t// validateLength() {\r\n\t// \tconst metadata = new Metadata(this.getMetadata())\r\n\t// \tmetadata.selectNumberingPlan(this.countryCallingCode)\r\n\t// \tconst result = checkNumberLength(this.nationalNumber, metadata)\r\n\t// \tif (result !== 'IS_POSSIBLE') {\r\n\t// \t\treturn result\r\n\t// \t}\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)\r\n\r\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\r\n\tlet country\r\n\tlet countryCallingCode\r\n\r\n\tconst metadata = new Metadata(metadataJson)\r\n\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t// Also store the country code as `.country`.\r\n\tif (isCountryCode(countryOrCountryCallingCode)) {\r\n\t\tcountry = countryOrCountryCallingCode\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t\tcountryCallingCode = metadata.countryCallingCode()\r\n\t} else {\r\n\t\tcountryCallingCode = countryOrCountryCallingCode\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tif (metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\tcountry = '001'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode\r\n\t}\r\n}\r\n\r\nconst E164_NUMBER_REGEXP = /^\\+\\d+$/"],"mappings":"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","ignoreList":[]}