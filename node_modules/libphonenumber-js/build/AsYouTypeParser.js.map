{"version":3,"file":"AsYouTypeParser.js","names":["_extractCountryCallingCode2","_interopRequireDefault","require","_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","_extractNationalNumberFromPossiblyIncompleteNumber","_stripIddPrefix","_parseDigits","_constants","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_slicedToArray","r","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","t","toString","call","slice","name","Array","from","test","length","n","l","i","u","f","next","Object","done","push","value","isArray","_classCallCheck","_defineProperties","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","_toPrimitive","toPrimitive","String","Number","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART","VALID_PUNCTUATION","VALID_DIGITS","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","RegExp","VALID_FORMATTED_PHONE_NUMBER_PART","PLUS_CHARS","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","exports","_ref","defaultCountry","defaultCallingCode","metadata","onNationalSignificantNumberChange","input","text","state","_extractFormattedDigi","extractFormattedDigitsAndPlus","_extractFormattedDigi2","formattedDigits","hasPlus","digits","parseDigits","justLeadingPlus","startInternationalNumber","inputDigits","nextDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","extractCountryCallingCode","appendNationalSignificantNumberDigits","international","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","getNationalDigits","stateUpdate","update","_ref2","callingCode","_extractCountryCallin","getDigitsWithoutInternationalPrefix","countryCallingCode","number","setCallingCode","nationalSignificantNumber","reset","numberingPlan","hasSelectedNumberingPlan","nationalPrefixForParsing","_nationalPrefixForParsing","couldPossiblyExtractAnotherNationalSignificantNumber","undefined","nationalDigits","setState","_extractNationalNumbe","extractNationalNumberFromPossiblyIncompleteNumber","nationalPrefix","nationalNumber","carrierCode","onExtractedNationalNumber","extractAnotherNationalSignificantNumber","prevNationalSignificantNumber","_extractNationalNumbe2","complexPrefixBeforeNationalSignificantNumber","nationalSignificantNumberMatchesInput","nationalSignificantNumberIndex","lastIndexOf","prefixBeforeNationalNumber","reExtractNationalSignificantNumber","extractCallingCodeAndNationalSignificantNumber","fixMissingPlus","IDDPrefix","numberWithoutIDD","stripIddPrefix","country","_extractCountryCallin2","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","newCallingCode","missingPlus","_ref3","resetNationalSignificantNumber","extractFormattedPhoneNumber","startsAt","search","replace","_extractFormattedDigitsAndPlus","extractedNumber","_extractFormattedDigi3","_extractFormattedDigi4"],"sources":["../source/AsYouTypeParser.js"],"sourcesContent":["import extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants.js'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART =\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i')\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART =\r\n\t'(?:' +\r\n\t\t'[' + PLUS_CHARS + ']' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']*' +\r\n\t\t'|' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']+' +\r\n\t')'\r\n\r\nconst AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp(\r\n\t'[^' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+' +\r\n\t'.*' +\r\n\t'$'\r\n)\r\n\r\n// Tests whether `national_prefix_for_parsing` could match\r\n// different national prefixes.\r\n// Matches anything that's not a digit or a square bracket.\r\nconst COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/\r\n\r\nexport default class AsYouTypeParser {\r\n\tconstructor({\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata,\r\n\t\tonNationalSignificantNumberChange\r\n\t}) {\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.metadata = metadata\r\n\t\tthis.onNationalSignificantNumberChange = onNationalSignificantNumberChange\r\n\t}\r\n\r\n\tinput(text, state) {\r\n\t\tconst [formattedDigits, hasPlus] = extractFormattedDigitsAndPlus(text)\r\n\t\tconst digits = parseDigits(formattedDigits)\r\n\t\t// Checks for a special case: just a leading `+` has been entered.\r\n\t\tlet justLeadingPlus\r\n\t\tif (hasPlus) {\r\n\t\t\tif (!state.digits) {\r\n\t\t\t\tstate.startInternationalNumber()\r\n\t\t\t\tif (!digits) {\r\n\t\t\t\t\tjustLeadingPlus = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (digits) {\r\n\t\t\tthis.inputDigits(digits, state)\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number digits.\r\n\t * @param  {string} digits\r\n\t * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n\t */\r\n\tinputDigits(nextDigits, state) {\r\n\t\tconst { digits } = state\r\n\t\tconst hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3\r\n\r\n\t\t// Append phone number digits.\r\n\t\tstate.appendDigits(nextDigits)\r\n\r\n\t\t// Attempt to extract IDD prefix:\r\n\t\t// Some users input their phone number in international format,\r\n\t\t// but in an \"out-of-country\" dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers as soon as there're at least 3 digits.\r\n\t\t// Google's library attempts to extract IDD prefix at 3 digits,\r\n\t\t// so this library just copies that behavior.\r\n\t\t// I guess that's because the most commot IDD prefixes are\r\n\t\t// `00` (Europe) and `011` (US).\r\n\t\t// There exist really long IDD prefixes too:\r\n\t\t// for example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t// An IDD prefix is extracted here, and then every time when\r\n\t\t// there's a new digit and the number couldn't be formatted.\r\n\t\tif (hasReceivedThreeLeadingDigits) {\r\n\t\t\tthis.extractIddPrefix(state)\r\n\t\t}\r\n\r\n\t\tif (this.isWaitingForCountryCallingCode(state)) {\r\n\t\t\tif (!this.extractCountryCallingCode(state)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstate.appendNationalSignificantNumberDigits(nextDigits)\r\n\t\t}\r\n\r\n\t\t// If a phone number is being input in international format,\r\n\t\t// then it's not valid for it to have a national prefix.\r\n\t\t// Still, some people incorrectly input such numbers with a national prefix.\r\n\t\t// In such cases, only attempt to strip a national prefix if the number becomes too long.\r\n\t\t// (but that is done later, not here)\r\n\t\tif (!state.international) {\r\n\t\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisWaitingForCountryCallingCode({ international, callingCode }) {\r\n\t\treturn international && !callingCode\r\n\t}\r\n\r\n\t// Extracts a country calling code from a number\r\n\t// being entered in internatonal format.\r\n\textractCountryCallingCode(state) {\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\t\t'+' + state.getDigitsWithoutInternationalPrefix(),\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (countryCallingCode) {\r\n\t\t\tstate.setCallingCode(countryCallingCode)\r\n\t\t\tstate.update({\r\n\t\t\t\tnationalSignificantNumber: number\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\treset(numberingPlan) {\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.hasSelectedNumberingPlan = true\r\n\t\t\tconst nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing()\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing)\r\n\t\t} else {\r\n\t\t\tthis.hasSelectedNumberingPlan = undefined\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a national (significant) number from user input.\r\n\t * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n\t * and doesn't apply `national_prefix_transform_rule` after that.\r\n\t * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n\t * @return {boolean} [extracted]\r\n\t */\r\n\textractNationalSignificantNumber(nationalDigits, setState) {\r\n\t\tif (!this.hasSelectedNumberingPlan) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\tif (nationalNumber === nationalDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\t/**\r\n\t * In Google's code this function is called \"attempt to extract longer NDD\".\r\n\t * \"Some national prefixes are a substring of others\", they say.\r\n\t * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n\t */\r\n\textractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\r\n\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\treturn this.extractNationalSignificantNumber(nationalDigits, setState)\r\n\t\t}\r\n\t\tif (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\t// If a national prefix has been extracted previously,\r\n\t\t// then it's always extracted as additional digits are added.\r\n\t\t// That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\r\n\t\t// doesn't do anything different from what it currently does.\r\n\t\t// So, just in case, here's this check, though it doesn't occur.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (nationalNumber === prevNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\tonExtractedNationalNumber(\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalDigits,\r\n\t\tsetState\r\n\t) {\r\n\t\tlet complexPrefixBeforeNationalSignificantNumber\r\n\t\tlet nationalSignificantNumberMatchesInput\r\n\t\t// This check also works with empty `this.nationalSignificantNumber`.\r\n\t\tconst nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber)\r\n\t\t// If the extracted national (significant) number is the\r\n\t\t// last substring of the `digits`, then it means that it hasn't been altered:\r\n\t\t// no digits have been removed from the national (significant) number\r\n\t\t// while applying `national_prefix_transform_rule`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\tif (nationalSignificantNumberIndex >= 0 &&\r\n\t\t\tnationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\r\n\t\t\tnationalSignificantNumberMatchesInput = true\r\n\t\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t\t// as just a basic national prefix, then such prefix is stored in\r\n\t\t\t// `this.complexPrefixBeforeNationalSignificantNumber` property and will be\r\n\t\t\t// prepended \"as is\" to the national (significant) number to produce\r\n\t\t\t// a formatted result.\r\n\t\t\tconst prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex)\r\n\t\t\t// `prefixBeforeNationalNumber` is always non-empty,\r\n\t\t\t// because `onExtractedNationalNumber()` isn't called\r\n\t\t\t// when a national (significant) number hasn't been actually \"extracted\":\r\n\t\t\t// when a national (significant) number is equal to the national part of `digits`,\r\n\t\t\t// then `onExtractedNationalNumber()` doesn't get called.\r\n\t\t\tif (prefixBeforeNationalNumber !== nationalPrefix) {\r\n\t\t\t\tcomplexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetState({\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tnationalSignificantNumberMatchesInput,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t\t})\r\n\t\t// `onExtractedNationalNumber()` is only called when\r\n\t\t// the national (significant) number actually did change.\r\n\t\tthis.hasExtractedNationalSignificantNumber = true\r\n\t\tthis.onNationalSignificantNumberChange()\r\n\t}\r\n\r\n\treExtractNationalSignificantNumber(state) {\r\n\t\t// Attempt to extract a national prefix.\r\n\t\t//\r\n\t\t// Some people incorrectly input national prefix\r\n\t\t// in an international phone number.\r\n\t\t// For example, some people write British phone numbers as `+44(0)...`.\r\n\t\t//\r\n\t\t// Also, in some rare cases, it is valid for a national prefix\r\n\t\t// to be a part of an international phone number.\r\n\t\t// For example, mobile phone numbers in Mexico are supposed to be\r\n\t\t// dialled internationally using a `1` national prefix,\r\n\t\t// so the national prefix will be part of an international number.\r\n\t\t//\r\n\t\t// Quote from:\r\n\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\r\n\t\t//\r\n\t\t// \"Dialing a Mexican cell phone from abroad\r\n\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\r\n\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\r\n\t\t// (which is “52”) and before the area code.\r\n\t\t// You also ignore the 045, and simply dial the area code and the\r\n\t\t// cell phone’s number.\r\n\t\t//\r\n\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\r\n\t\t// asking you to redial using it.\r\n\t\t//\r\n\t\t// For example, if you are calling from the USA to a cell phone\r\n\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\r\n\t\t// (Note that this is different to calling a land line in Mexico City\r\n\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\r\n\t\t//\r\n\t\t// Google's demo output:\r\n\t\t// https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\r\n\t\t//\r\n\t\tif (this.extractAnotherNationalSignificantNumber(\r\n\t\t\tstate.getNationalDigits(),\r\n\t\t\tstate.nationalSignificantNumber,\r\n\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// If no format matches the phone number, then it could be\r\n\t\t// \"a really long IDD\" (quote from a comment in Google's library).\r\n\t\t// An IDD prefix is first extracted when the user has entered at least 3 digits,\r\n\t\t// and then here — every time when there's a new digit and the number\r\n\t\t// couldn't be formatted.\r\n\t\t// For example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t//\r\n\t\t// Could also check `!hasReceivedThreeLeadingDigits` here\r\n\t\t// to filter out the case when this check duplicates the one\r\n\t\t// already performed when there're 3 leading digits,\r\n\t\t// but it's not a big deal, and in most cases there\r\n\t\t// will be a suitable `format` when there're 3 leading digits.\r\n\t\t//\r\n\t\tif (this.extractIddPrefix(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// Google's AsYouType formatter supports sort of an \"autocorrection\" feature\r\n\t\t// when it \"autocorrects\" numbers that have been input for a country\r\n\t\t// with that country's calling code.\r\n\t\t// Such \"autocorrection\" feature looks weird, but different people have been requesting it:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\tif (this.fixMissingPlus(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\textractIddPrefix(state) {\r\n\t\t// An IDD prefix can't be present in a number written with a `+`.\r\n\t\t// Also, don't re-extract an IDD prefix if has already been extracted.\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tIDDPrefix,\r\n\t\t\tdigits,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = state\r\n\t\tif (international || IDDPrefix) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Some users input their phone number in \"out-of-country\"\r\n\t\t// dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(\r\n\t\t\tdigits,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\r\n\t\t\t// If an IDD prefix was stripped then convert the IDD-prefixed number\r\n\t\t\t// to international number for subsequent parsing.\r\n\t\t\tstate.update({\r\n\t\t\t\tIDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\r\n\t\t\t})\r\n\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\tcountry: undefined,\r\n\t\t\t\tcallingCode: undefined\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tfixMissingPlus(state) {\r\n\t\tif (!state.international) {\r\n\t\t\tconst {\r\n\t\t\t\tcountryCallingCode: newCallingCode,\r\n\t\t\t\tnumber\r\n\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\tstate.digits,\r\n\t\t\t\tthis.defaultCountry,\r\n\t\t\t\tthis.defaultCallingCode,\r\n\t\t\t\tthis.metadata.metadata\r\n\t\t\t)\r\n\t\t\tif (newCallingCode) {\r\n\t\t\t\tstate.update({\r\n\t\t\t\t\tmissingPlus: true\r\n\t\t\t\t})\r\n\t\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\t\tcountry: state.country,\r\n\t\t\t\t\tcallingCode: newCallingCode\r\n\t\t\t\t})\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstartInternationalNumber(state, { country, callingCode }) {\r\n\t\tstate.startInternationalNumber(country, callingCode)\r\n\t\t// If a national (significant) number has been extracted before, reset it.\r\n\t\tif (state.nationalSignificantNumber) {\r\n\t\t\tstate.resetNationalSignificantNumber()\r\n\t\t\tthis.onNationalSignificantNumberChange()\r\n\t\t\tthis.hasExtractedNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\textractCallingCodeAndNationalSignificantNumber(state) {\r\n\t\tif (this.extractCountryCallingCode(state)) {\r\n\t\t\t// `this.extractCallingCode()` is currently called when the number\r\n\t\t\t// couldn't be formatted during the standard procedure.\r\n\t\t\t// Normally, the national prefix would be re-extracted\r\n\t\t\t// for an international number if such number couldn't be formatted,\r\n\t\t\t// but since it's already not able to be formatted,\r\n\t\t\t// there won't be yet another retry, so also extract national prefix here.\r\n\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\r\nfunction extractFormattedPhoneNumber(text) {\r\n\t// Attempt to extract a possible number from the string passed in.\r\n\tconst startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\t// Trim everything to the left of the phone number.\r\n\ttext = text.slice(startsAt)\r\n\t// Trim the `+`.\r\n\tlet hasPlus\r\n\tif (text[0] === '+') {\r\n\t\thasPlus = true\r\n\t\ttext = text.slice('+'.length)\r\n\t}\r\n\t// Trim everything to the right of the phone number.\r\n\ttext = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, '')\r\n\t// Re-add the previously trimmed `+`.\r\n\tif (hasPlus) {\r\n\t\ttext = '+' + text\r\n\t}\r\n\treturn text\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nfunction _extractFormattedDigitsAndPlus(text) {\r\n\t// Extract a formatted phone number part from text.\r\n\tconst extractedNumber = extractFormattedPhoneNumber(text) || ''\r\n\t// Trim a `+`.\r\n\tif (extractedNumber[0] === '+') {\r\n\t\treturn [extractedNumber.slice('+'.length), true]\r\n\t}\r\n\treturn [extractedNumber]\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nexport function extractFormattedDigitsAndPlus(text) {\r\n\tlet [formattedDigits, hasPlus] = _extractFormattedDigitsAndPlus(text)\r\n\t// If the extracted phone number part\r\n\t// can possibly be a part of some valid phone number\r\n\t// then parse phone number characters from a formatted phone number.\r\n\tif (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\r\n\t\tformattedDigits = ''\r\n\t}\r\n\treturn [formattedDigits, hasPlus]\r\n}"],"mappings":"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","ignoreList":[]}