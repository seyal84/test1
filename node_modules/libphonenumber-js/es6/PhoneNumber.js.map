{"version":3,"file":"PhoneNumber.js","names":["Metadata","validateMetadata","isPossibleNumber","isValidNumber","getNumberType","getPossibleCountriesForNumber","extractCountryCallingCode","isObject","formatNumber","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber","countryOrCountryCallingCode","nationalNumber","metadata","_classCallCheck","TypeError","countries","e164Number","E164_NUMBER_REGEXP","test","Error","_extractCountryCallin","undefined","countryCallingCode","number","_getCountryAndCountry","getCountryAndCountryCallingCode","country","getMetadata","_createClass","key","value","setExt","ext","getPossibleCountries","isPossible","v2","isValid","isNonGeographic","isNonGeographicCallingCode","isEqual","phoneNumber","getType","format","options","_objectSpread","formatNational","formatInternational","getURI","default","isCountryCode","metadataJson","selectNumberingPlan"],"sources":["../source/PhoneNumber.js"],"sourcesContent":["import Metadata, { validateMetadata } from './metadata.js'\r\nimport isPossibleNumber from './isPossible.js'\r\nimport isValidNumber from './isValid.js'\r\n// import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport isObject from './helpers/isObject.js'\r\nimport formatNumber from './format.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\t/**\r\n\t * @param  {string} countryOrCountryCallingCode\r\n\t * @param  {string} nationalNumber\r\n\t * @param  {object} metadata â€” Metadata JSON\r\n\t * @return {PhoneNumber}\r\n\t */\r\n\tconstructor(countryOrCountryCallingCode, nationalNumber, metadata) {\r\n\t\t// Validate `countryOrCountryCallingCode` argument.\r\n\t\tif (!countryOrCountryCallingCode) {\r\n\t\t\tthrow new TypeError('First argument is required')\r\n\t\t}\r\n\t\tif (typeof countryOrCountryCallingCode !== 'string') {\r\n\t\t\tthrow new TypeError('First argument must be a string')\r\n\t\t}\r\n\r\n\t\t// In case of public API use: `constructor(number, metadata)`.\r\n\t\t// Transform the arguments from `constructor(number, metadata)` to\r\n\t\t// `constructor(countryOrCountryCallingCode, nationalNumber, metadata)`.\r\n\t\tif (countryOrCountryCallingCode[0] === '+' && !nationalNumber) {\r\n\t\t\tthrow new TypeError('`metadata` argument not passed')\r\n\t\t}\r\n\t\tif (isObject(nationalNumber) && isObject(nationalNumber.countries)) {\r\n\t\t\tmetadata = nationalNumber\r\n\t\t\tconst e164Number = countryOrCountryCallingCode\r\n\t\t\tif (!E164_NUMBER_REGEXP.test(e164Number)) {\r\n\t\t\t\tthrow new Error('Invalid `number` argument passed: must consist of a \"+\" followed by digits')\r\n\t\t\t}\r\n\t\t\tconst { countryCallingCode, number } = extractCountryCallingCode(e164Number, undefined, undefined, metadata)\r\n\t\t\tnationalNumber = number\r\n\t\t\tcountryOrCountryCallingCode = countryCallingCode\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\tthrow new Error('Invalid `number` argument passed: too short')\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `nationalNumber` argument.\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument is required')\r\n\t\t}\r\n\t\tif (typeof nationalNumber !== 'string') {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument must be a string')\r\n\t\t}\r\n\r\n\t\t// Validate `metadata` argument.\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\t// Initialize properties.\r\n\t\tconst { country, countryCallingCode } = getCountryAndCountryCallingCode(\r\n\t\t\tcountryOrCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tthis.country = country\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\t// Exclude `metadata` property output from `PhoneNumber.toString()`\r\n\t\t// so that it doesn't clutter the console output of Node.js.\r\n\t\t// Previously, when Node.js did `console.log(new PhoneNumber(...))`,\r\n\t\t// it would output the whole internal structure of the `metadata` object.\r\n\t\tthis.getMetadata = () => metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tgetPossibleCountries() {\r\n\t\tif (this.country) {\r\n\t\t\treturn [this.country]\r\n\t\t}\r\n\t\treturn getPossibleCountriesForNumber(\r\n\t\t\tthis.countryCallingCode,\r\n\t\t\tthis.nationalNumber,\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.getMetadata())\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\r\n\t// but later it was found out that it doesn't include the possible `TOO_SHORT` result\r\n\t// returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\r\n\t// so eventually I simply commented out this method from the `PhoneNumber` class\r\n\t// and just left the `validatePhoneNumberLength()` function, even though that one would require\r\n\t// and additional step to also validate the actual country / calling code of the phone number.\r\n\t// validateLength() {\r\n\t// \tconst metadata = new Metadata(this.getMetadata())\r\n\t// \tmetadata.selectNumberingPlan(this.countryCallingCode)\r\n\t// \tconst result = checkNumberLength(this.nationalNumber, metadata)\r\n\t// \tif (result !== 'IS_POSSIBLE') {\r\n\t// \t\treturn result\r\n\t// \t}\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)\r\n\r\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\r\n\tlet country\r\n\tlet countryCallingCode\r\n\r\n\tconst metadata = new Metadata(metadataJson)\r\n\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t// Also store the country code as `.country`.\r\n\tif (isCountryCode(countryOrCountryCallingCode)) {\r\n\t\tcountry = countryOrCountryCallingCode\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t\tcountryCallingCode = metadata.countryCallingCode()\r\n\t} else {\r\n\t\tcountryCallingCode = countryOrCountryCallingCode\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tif (metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\tcountry = '001'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode\r\n\t}\r\n}\r\n\r\nconst E164_NUMBER_REGEXP = /^\\+\\d+$/"],"mappings":"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","ignoreList":[]}