import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { CloudTrailClient } from "./CloudTrailClient";
import {
  AddTagsCommandInput,
  AddTagsCommandOutput,
} from "./commands/AddTagsCommand";
import {
  CancelQueryCommandInput,
  CancelQueryCommandOutput,
} from "./commands/CancelQueryCommand";
import {
  CreateChannelCommandInput,
  CreateChannelCommandOutput,
} from "./commands/CreateChannelCommand";
import {
  CreateDashboardCommandInput,
  CreateDashboardCommandOutput,
} from "./commands/CreateDashboardCommand";
import {
  CreateEventDataStoreCommandInput,
  CreateEventDataStoreCommandOutput,
} from "./commands/CreateEventDataStoreCommand";
import {
  CreateTrailCommandInput,
  CreateTrailCommandOutput,
} from "./commands/CreateTrailCommand";
import {
  DeleteChannelCommandInput,
  DeleteChannelCommandOutput,
} from "./commands/DeleteChannelCommand";
import {
  DeleteDashboardCommandInput,
  DeleteDashboardCommandOutput,
} from "./commands/DeleteDashboardCommand";
import {
  DeleteEventDataStoreCommandInput,
  DeleteEventDataStoreCommandOutput,
} from "./commands/DeleteEventDataStoreCommand";
import {
  DeleteResourcePolicyCommandInput,
  DeleteResourcePolicyCommandOutput,
} from "./commands/DeleteResourcePolicyCommand";
import {
  DeleteTrailCommandInput,
  DeleteTrailCommandOutput,
} from "./commands/DeleteTrailCommand";
import {
  DeregisterOrganizationDelegatedAdminCommandInput,
  DeregisterOrganizationDelegatedAdminCommandOutput,
} from "./commands/DeregisterOrganizationDelegatedAdminCommand";
import {
  DescribeQueryCommandInput,
  DescribeQueryCommandOutput,
} from "./commands/DescribeQueryCommand";
import {
  DescribeTrailsCommandInput,
  DescribeTrailsCommandOutput,
} from "./commands/DescribeTrailsCommand";
import {
  DisableFederationCommandInput,
  DisableFederationCommandOutput,
} from "./commands/DisableFederationCommand";
import {
  EnableFederationCommandInput,
  EnableFederationCommandOutput,
} from "./commands/EnableFederationCommand";
import {
  GenerateQueryCommandInput,
  GenerateQueryCommandOutput,
} from "./commands/GenerateQueryCommand";
import {
  GetChannelCommandInput,
  GetChannelCommandOutput,
} from "./commands/GetChannelCommand";
import {
  GetDashboardCommandInput,
  GetDashboardCommandOutput,
} from "./commands/GetDashboardCommand";
import {
  GetEventConfigurationCommandInput,
  GetEventConfigurationCommandOutput,
} from "./commands/GetEventConfigurationCommand";
import {
  GetEventDataStoreCommandInput,
  GetEventDataStoreCommandOutput,
} from "./commands/GetEventDataStoreCommand";
import {
  GetEventSelectorsCommandInput,
  GetEventSelectorsCommandOutput,
} from "./commands/GetEventSelectorsCommand";
import {
  GetImportCommandInput,
  GetImportCommandOutput,
} from "./commands/GetImportCommand";
import {
  GetInsightSelectorsCommandInput,
  GetInsightSelectorsCommandOutput,
} from "./commands/GetInsightSelectorsCommand";
import {
  GetQueryResultsCommandInput,
  GetQueryResultsCommandOutput,
} from "./commands/GetQueryResultsCommand";
import {
  GetResourcePolicyCommandInput,
  GetResourcePolicyCommandOutput,
} from "./commands/GetResourcePolicyCommand";
import {
  GetTrailCommandInput,
  GetTrailCommandOutput,
} from "./commands/GetTrailCommand";
import {
  GetTrailStatusCommandInput,
  GetTrailStatusCommandOutput,
} from "./commands/GetTrailStatusCommand";
import {
  ListChannelsCommandInput,
  ListChannelsCommandOutput,
} from "./commands/ListChannelsCommand";
import {
  ListDashboardsCommandInput,
  ListDashboardsCommandOutput,
} from "./commands/ListDashboardsCommand";
import {
  ListEventDataStoresCommandInput,
  ListEventDataStoresCommandOutput,
} from "./commands/ListEventDataStoresCommand";
import {
  ListImportFailuresCommandInput,
  ListImportFailuresCommandOutput,
} from "./commands/ListImportFailuresCommand";
import {
  ListImportsCommandInput,
  ListImportsCommandOutput,
} from "./commands/ListImportsCommand";
import {
  ListInsightsMetricDataCommandInput,
  ListInsightsMetricDataCommandOutput,
} from "./commands/ListInsightsMetricDataCommand";
import {
  ListPublicKeysCommandInput,
  ListPublicKeysCommandOutput,
} from "./commands/ListPublicKeysCommand";
import {
  ListQueriesCommandInput,
  ListQueriesCommandOutput,
} from "./commands/ListQueriesCommand";
import {
  ListTagsCommandInput,
  ListTagsCommandOutput,
} from "./commands/ListTagsCommand";
import {
  ListTrailsCommandInput,
  ListTrailsCommandOutput,
} from "./commands/ListTrailsCommand";
import {
  LookupEventsCommandInput,
  LookupEventsCommandOutput,
} from "./commands/LookupEventsCommand";
import {
  PutEventConfigurationCommandInput,
  PutEventConfigurationCommandOutput,
} from "./commands/PutEventConfigurationCommand";
import {
  PutEventSelectorsCommandInput,
  PutEventSelectorsCommandOutput,
} from "./commands/PutEventSelectorsCommand";
import {
  PutInsightSelectorsCommandInput,
  PutInsightSelectorsCommandOutput,
} from "./commands/PutInsightSelectorsCommand";
import {
  PutResourcePolicyCommandInput,
  PutResourcePolicyCommandOutput,
} from "./commands/PutResourcePolicyCommand";
import {
  RegisterOrganizationDelegatedAdminCommandInput,
  RegisterOrganizationDelegatedAdminCommandOutput,
} from "./commands/RegisterOrganizationDelegatedAdminCommand";
import {
  RemoveTagsCommandInput,
  RemoveTagsCommandOutput,
} from "./commands/RemoveTagsCommand";
import {
  RestoreEventDataStoreCommandInput,
  RestoreEventDataStoreCommandOutput,
} from "./commands/RestoreEventDataStoreCommand";
import {
  SearchSampleQueriesCommandInput,
  SearchSampleQueriesCommandOutput,
} from "./commands/SearchSampleQueriesCommand";
import {
  StartDashboardRefreshCommandInput,
  StartDashboardRefreshCommandOutput,
} from "./commands/StartDashboardRefreshCommand";
import {
  StartEventDataStoreIngestionCommandInput,
  StartEventDataStoreIngestionCommandOutput,
} from "./commands/StartEventDataStoreIngestionCommand";
import {
  StartImportCommandInput,
  StartImportCommandOutput,
} from "./commands/StartImportCommand";
import {
  StartLoggingCommandInput,
  StartLoggingCommandOutput,
} from "./commands/StartLoggingCommand";
import {
  StartQueryCommandInput,
  StartQueryCommandOutput,
} from "./commands/StartQueryCommand";
import {
  StopEventDataStoreIngestionCommandInput,
  StopEventDataStoreIngestionCommandOutput,
} from "./commands/StopEventDataStoreIngestionCommand";
import {
  StopImportCommandInput,
  StopImportCommandOutput,
} from "./commands/StopImportCommand";
import {
  StopLoggingCommandInput,
  StopLoggingCommandOutput,
} from "./commands/StopLoggingCommand";
import {
  UpdateChannelCommandInput,
  UpdateChannelCommandOutput,
} from "./commands/UpdateChannelCommand";
import {
  UpdateDashboardCommandInput,
  UpdateDashboardCommandOutput,
} from "./commands/UpdateDashboardCommand";
import {
  UpdateEventDataStoreCommandInput,
  UpdateEventDataStoreCommandOutput,
} from "./commands/UpdateEventDataStoreCommand";
import {
  UpdateTrailCommandInput,
  UpdateTrailCommandOutput,
} from "./commands/UpdateTrailCommand";
export interface CloudTrail {
  addTags(
    args: AddTagsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AddTagsCommandOutput>;
  addTags(
    args: AddTagsCommandInput,
    cb: (err: any, data?: AddTagsCommandOutput) => void
  ): void;
  addTags(
    args: AddTagsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AddTagsCommandOutput) => void
  ): void;
  cancelQuery(
    args: CancelQueryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CancelQueryCommandOutput>;
  cancelQuery(
    args: CancelQueryCommandInput,
    cb: (err: any, data?: CancelQueryCommandOutput) => void
  ): void;
  cancelQuery(
    args: CancelQueryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CancelQueryCommandOutput) => void
  ): void;
  createChannel(
    args: CreateChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateChannelCommandOutput>;
  createChannel(
    args: CreateChannelCommandInput,
    cb: (err: any, data?: CreateChannelCommandOutput) => void
  ): void;
  createChannel(
    args: CreateChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateChannelCommandOutput) => void
  ): void;
  createDashboard(
    args: CreateDashboardCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateDashboardCommandOutput>;
  createDashboard(
    args: CreateDashboardCommandInput,
    cb: (err: any, data?: CreateDashboardCommandOutput) => void
  ): void;
  createDashboard(
    args: CreateDashboardCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateDashboardCommandOutput) => void
  ): void;
  createEventDataStore(
    args: CreateEventDataStoreCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateEventDataStoreCommandOutput>;
  createEventDataStore(
    args: CreateEventDataStoreCommandInput,
    cb: (err: any, data?: CreateEventDataStoreCommandOutput) => void
  ): void;
  createEventDataStore(
    args: CreateEventDataStoreCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateEventDataStoreCommandOutput) => void
  ): void;
  createTrail(
    args: CreateTrailCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateTrailCommandOutput>;
  createTrail(
    args: CreateTrailCommandInput,
    cb: (err: any, data?: CreateTrailCommandOutput) => void
  ): void;
  createTrail(
    args: CreateTrailCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateTrailCommandOutput) => void
  ): void;
  deleteChannel(
    args: DeleteChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelCommandOutput>;
  deleteChannel(
    args: DeleteChannelCommandInput,
    cb: (err: any, data?: DeleteChannelCommandOutput) => void
  ): void;
  deleteChannel(
    args: DeleteChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelCommandOutput) => void
  ): void;
  deleteDashboard(
    args: DeleteDashboardCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteDashboardCommandOutput>;
  deleteDashboard(
    args: DeleteDashboardCommandInput,
    cb: (err: any, data?: DeleteDashboardCommandOutput) => void
  ): void;
  deleteDashboard(
    args: DeleteDashboardCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteDashboardCommandOutput) => void
  ): void;
  deleteEventDataStore(
    args: DeleteEventDataStoreCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteEventDataStoreCommandOutput>;
  deleteEventDataStore(
    args: DeleteEventDataStoreCommandInput,
    cb: (err: any, data?: DeleteEventDataStoreCommandOutput) => void
  ): void;
  deleteEventDataStore(
    args: DeleteEventDataStoreCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteEventDataStoreCommandOutput) => void
  ): void;
  deleteResourcePolicy(
    args: DeleteResourcePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteResourcePolicyCommandOutput>;
  deleteResourcePolicy(
    args: DeleteResourcePolicyCommandInput,
    cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void
  ): void;
  deleteResourcePolicy(
    args: DeleteResourcePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void
  ): void;
  deleteTrail(
    args: DeleteTrailCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteTrailCommandOutput>;
  deleteTrail(
    args: DeleteTrailCommandInput,
    cb: (err: any, data?: DeleteTrailCommandOutput) => void
  ): void;
  deleteTrail(
    args: DeleteTrailCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteTrailCommandOutput) => void
  ): void;
  deregisterOrganizationDelegatedAdmin(
    args: DeregisterOrganizationDelegatedAdminCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeregisterOrganizationDelegatedAdminCommandOutput>;
  deregisterOrganizationDelegatedAdmin(
    args: DeregisterOrganizationDelegatedAdminCommandInput,
    cb: (
      err: any,
      data?: DeregisterOrganizationDelegatedAdminCommandOutput
    ) => void
  ): void;
  deregisterOrganizationDelegatedAdmin(
    args: DeregisterOrganizationDelegatedAdminCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DeregisterOrganizationDelegatedAdminCommandOutput
    ) => void
  ): void;
  describeQuery(): Promise<DescribeQueryCommandOutput>;
  describeQuery(
    args: DescribeQueryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeQueryCommandOutput>;
  describeQuery(
    args: DescribeQueryCommandInput,
    cb: (err: any, data?: DescribeQueryCommandOutput) => void
  ): void;
  describeQuery(
    args: DescribeQueryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeQueryCommandOutput) => void
  ): void;
  describeTrails(): Promise<DescribeTrailsCommandOutput>;
  describeTrails(
    args: DescribeTrailsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeTrailsCommandOutput>;
  describeTrails(
    args: DescribeTrailsCommandInput,
    cb: (err: any, data?: DescribeTrailsCommandOutput) => void
  ): void;
  describeTrails(
    args: DescribeTrailsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeTrailsCommandOutput) => void
  ): void;
  disableFederation(
    args: DisableFederationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DisableFederationCommandOutput>;
  disableFederation(
    args: DisableFederationCommandInput,
    cb: (err: any, data?: DisableFederationCommandOutput) => void
  ): void;
  disableFederation(
    args: DisableFederationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DisableFederationCommandOutput) => void
  ): void;
  enableFederation(
    args: EnableFederationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<EnableFederationCommandOutput>;
  enableFederation(
    args: EnableFederationCommandInput,
    cb: (err: any, data?: EnableFederationCommandOutput) => void
  ): void;
  enableFederation(
    args: EnableFederationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: EnableFederationCommandOutput) => void
  ): void;
  generateQuery(
    args: GenerateQueryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GenerateQueryCommandOutput>;
  generateQuery(
    args: GenerateQueryCommandInput,
    cb: (err: any, data?: GenerateQueryCommandOutput) => void
  ): void;
  generateQuery(
    args: GenerateQueryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GenerateQueryCommandOutput) => void
  ): void;
  getChannel(
    args: GetChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetChannelCommandOutput>;
  getChannel(
    args: GetChannelCommandInput,
    cb: (err: any, data?: GetChannelCommandOutput) => void
  ): void;
  getChannel(
    args: GetChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetChannelCommandOutput) => void
  ): void;
  getDashboard(
    args: GetDashboardCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetDashboardCommandOutput>;
  getDashboard(
    args: GetDashboardCommandInput,
    cb: (err: any, data?: GetDashboardCommandOutput) => void
  ): void;
  getDashboard(
    args: GetDashboardCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetDashboardCommandOutput) => void
  ): void;
  getEventConfiguration(): Promise<GetEventConfigurationCommandOutput>;
  getEventConfiguration(
    args: GetEventConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetEventConfigurationCommandOutput>;
  getEventConfiguration(
    args: GetEventConfigurationCommandInput,
    cb: (err: any, data?: GetEventConfigurationCommandOutput) => void
  ): void;
  getEventConfiguration(
    args: GetEventConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetEventConfigurationCommandOutput) => void
  ): void;
  getEventDataStore(
    args: GetEventDataStoreCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetEventDataStoreCommandOutput>;
  getEventDataStore(
    args: GetEventDataStoreCommandInput,
    cb: (err: any, data?: GetEventDataStoreCommandOutput) => void
  ): void;
  getEventDataStore(
    args: GetEventDataStoreCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetEventDataStoreCommandOutput) => void
  ): void;
  getEventSelectors(
    args: GetEventSelectorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetEventSelectorsCommandOutput>;
  getEventSelectors(
    args: GetEventSelectorsCommandInput,
    cb: (err: any, data?: GetEventSelectorsCommandOutput) => void
  ): void;
  getEventSelectors(
    args: GetEventSelectorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetEventSelectorsCommandOutput) => void
  ): void;
  getImport(
    args: GetImportCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetImportCommandOutput>;
  getImport(
    args: GetImportCommandInput,
    cb: (err: any, data?: GetImportCommandOutput) => void
  ): void;
  getImport(
    args: GetImportCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetImportCommandOutput) => void
  ): void;
  getInsightSelectors(): Promise<GetInsightSelectorsCommandOutput>;
  getInsightSelectors(
    args: GetInsightSelectorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetInsightSelectorsCommandOutput>;
  getInsightSelectors(
    args: GetInsightSelectorsCommandInput,
    cb: (err: any, data?: GetInsightSelectorsCommandOutput) => void
  ): void;
  getInsightSelectors(
    args: GetInsightSelectorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetInsightSelectorsCommandOutput) => void
  ): void;
  getQueryResults(
    args: GetQueryResultsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetQueryResultsCommandOutput>;
  getQueryResults(
    args: GetQueryResultsCommandInput,
    cb: (err: any, data?: GetQueryResultsCommandOutput) => void
  ): void;
  getQueryResults(
    args: GetQueryResultsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetQueryResultsCommandOutput) => void
  ): void;
  getResourcePolicy(
    args: GetResourcePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetResourcePolicyCommandOutput>;
  getResourcePolicy(
    args: GetResourcePolicyCommandInput,
    cb: (err: any, data?: GetResourcePolicyCommandOutput) => void
  ): void;
  getResourcePolicy(
    args: GetResourcePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetResourcePolicyCommandOutput) => void
  ): void;
  getTrail(
    args: GetTrailCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetTrailCommandOutput>;
  getTrail(
    args: GetTrailCommandInput,
    cb: (err: any, data?: GetTrailCommandOutput) => void
  ): void;
  getTrail(
    args: GetTrailCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetTrailCommandOutput) => void
  ): void;
  getTrailStatus(
    args: GetTrailStatusCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetTrailStatusCommandOutput>;
  getTrailStatus(
    args: GetTrailStatusCommandInput,
    cb: (err: any, data?: GetTrailStatusCommandOutput) => void
  ): void;
  getTrailStatus(
    args: GetTrailStatusCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetTrailStatusCommandOutput) => void
  ): void;
  listChannels(): Promise<ListChannelsCommandOutput>;
  listChannels(
    args: ListChannelsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelsCommandOutput>;
  listChannels(
    args: ListChannelsCommandInput,
    cb: (err: any, data?: ListChannelsCommandOutput) => void
  ): void;
  listChannels(
    args: ListChannelsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChannelsCommandOutput) => void
  ): void;
  listDashboards(): Promise<ListDashboardsCommandOutput>;
  listDashboards(
    args: ListDashboardsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDashboardsCommandOutput>;
  listDashboards(
    args: ListDashboardsCommandInput,
    cb: (err: any, data?: ListDashboardsCommandOutput) => void
  ): void;
  listDashboards(
    args: ListDashboardsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDashboardsCommandOutput) => void
  ): void;
  listEventDataStores(): Promise<ListEventDataStoresCommandOutput>;
  listEventDataStores(
    args: ListEventDataStoresCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListEventDataStoresCommandOutput>;
  listEventDataStores(
    args: ListEventDataStoresCommandInput,
    cb: (err: any, data?: ListEventDataStoresCommandOutput) => void
  ): void;
  listEventDataStores(
    args: ListEventDataStoresCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListEventDataStoresCommandOutput) => void
  ): void;
  listImportFailures(
    args: ListImportFailuresCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListImportFailuresCommandOutput>;
  listImportFailures(
    args: ListImportFailuresCommandInput,
    cb: (err: any, data?: ListImportFailuresCommandOutput) => void
  ): void;
  listImportFailures(
    args: ListImportFailuresCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListImportFailuresCommandOutput) => void
  ): void;
  listImports(): Promise<ListImportsCommandOutput>;
  listImports(
    args: ListImportsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListImportsCommandOutput>;
  listImports(
    args: ListImportsCommandInput,
    cb: (err: any, data?: ListImportsCommandOutput) => void
  ): void;
  listImports(
    args: ListImportsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListImportsCommandOutput) => void
  ): void;
  listInsightsMetricData(
    args: ListInsightsMetricDataCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListInsightsMetricDataCommandOutput>;
  listInsightsMetricData(
    args: ListInsightsMetricDataCommandInput,
    cb: (err: any, data?: ListInsightsMetricDataCommandOutput) => void
  ): void;
  listInsightsMetricData(
    args: ListInsightsMetricDataCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListInsightsMetricDataCommandOutput) => void
  ): void;
  listPublicKeys(): Promise<ListPublicKeysCommandOutput>;
  listPublicKeys(
    args: ListPublicKeysCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPublicKeysCommandOutput>;
  listPublicKeys(
    args: ListPublicKeysCommandInput,
    cb: (err: any, data?: ListPublicKeysCommandOutput) => void
  ): void;
  listPublicKeys(
    args: ListPublicKeysCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPublicKeysCommandOutput) => void
  ): void;
  listQueries(
    args: ListQueriesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListQueriesCommandOutput>;
  listQueries(
    args: ListQueriesCommandInput,
    cb: (err: any, data?: ListQueriesCommandOutput) => void
  ): void;
  listQueries(
    args: ListQueriesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListQueriesCommandOutput) => void
  ): void;
  listTags(
    args: ListTagsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsCommandOutput>;
  listTags(
    args: ListTagsCommandInput,
    cb: (err: any, data?: ListTagsCommandOutput) => void
  ): void;
  listTags(
    args: ListTagsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsCommandOutput) => void
  ): void;
  listTrails(): Promise<ListTrailsCommandOutput>;
  listTrails(
    args: ListTrailsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTrailsCommandOutput>;
  listTrails(
    args: ListTrailsCommandInput,
    cb: (err: any, data?: ListTrailsCommandOutput) => void
  ): void;
  listTrails(
    args: ListTrailsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTrailsCommandOutput) => void
  ): void;
  lookupEvents(): Promise<LookupEventsCommandOutput>;
  lookupEvents(
    args: LookupEventsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<LookupEventsCommandOutput>;
  lookupEvents(
    args: LookupEventsCommandInput,
    cb: (err: any, data?: LookupEventsCommandOutput) => void
  ): void;
  lookupEvents(
    args: LookupEventsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: LookupEventsCommandOutput) => void
  ): void;
  putEventConfiguration(
    args: PutEventConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutEventConfigurationCommandOutput>;
  putEventConfiguration(
    args: PutEventConfigurationCommandInput,
    cb: (err: any, data?: PutEventConfigurationCommandOutput) => void
  ): void;
  putEventConfiguration(
    args: PutEventConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutEventConfigurationCommandOutput) => void
  ): void;
  putEventSelectors(
    args: PutEventSelectorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutEventSelectorsCommandOutput>;
  putEventSelectors(
    args: PutEventSelectorsCommandInput,
    cb: (err: any, data?: PutEventSelectorsCommandOutput) => void
  ): void;
  putEventSelectors(
    args: PutEventSelectorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutEventSelectorsCommandOutput) => void
  ): void;
  putInsightSelectors(
    args: PutInsightSelectorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutInsightSelectorsCommandOutput>;
  putInsightSelectors(
    args: PutInsightSelectorsCommandInput,
    cb: (err: any, data?: PutInsightSelectorsCommandOutput) => void
  ): void;
  putInsightSelectors(
    args: PutInsightSelectorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutInsightSelectorsCommandOutput) => void
  ): void;
  putResourcePolicy(
    args: PutResourcePolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutResourcePolicyCommandOutput>;
  putResourcePolicy(
    args: PutResourcePolicyCommandInput,
    cb: (err: any, data?: PutResourcePolicyCommandOutput) => void
  ): void;
  putResourcePolicy(
    args: PutResourcePolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutResourcePolicyCommandOutput) => void
  ): void;
  registerOrganizationDelegatedAdmin(
    args: RegisterOrganizationDelegatedAdminCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RegisterOrganizationDelegatedAdminCommandOutput>;
  registerOrganizationDelegatedAdmin(
    args: RegisterOrganizationDelegatedAdminCommandInput,
    cb: (
      err: any,
      data?: RegisterOrganizationDelegatedAdminCommandOutput
    ) => void
  ): void;
  registerOrganizationDelegatedAdmin(
    args: RegisterOrganizationDelegatedAdminCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: RegisterOrganizationDelegatedAdminCommandOutput
    ) => void
  ): void;
  removeTags(
    args: RemoveTagsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RemoveTagsCommandOutput>;
  removeTags(
    args: RemoveTagsCommandInput,
    cb: (err: any, data?: RemoveTagsCommandOutput) => void
  ): void;
  removeTags(
    args: RemoveTagsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RemoveTagsCommandOutput) => void
  ): void;
  restoreEventDataStore(
    args: RestoreEventDataStoreCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RestoreEventDataStoreCommandOutput>;
  restoreEventDataStore(
    args: RestoreEventDataStoreCommandInput,
    cb: (err: any, data?: RestoreEventDataStoreCommandOutput) => void
  ): void;
  restoreEventDataStore(
    args: RestoreEventDataStoreCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RestoreEventDataStoreCommandOutput) => void
  ): void;
  searchSampleQueries(
    args: SearchSampleQueriesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SearchSampleQueriesCommandOutput>;
  searchSampleQueries(
    args: SearchSampleQueriesCommandInput,
    cb: (err: any, data?: SearchSampleQueriesCommandOutput) => void
  ): void;
  searchSampleQueries(
    args: SearchSampleQueriesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: SearchSampleQueriesCommandOutput) => void
  ): void;
  startDashboardRefresh(
    args: StartDashboardRefreshCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartDashboardRefreshCommandOutput>;
  startDashboardRefresh(
    args: StartDashboardRefreshCommandInput,
    cb: (err: any, data?: StartDashboardRefreshCommandOutput) => void
  ): void;
  startDashboardRefresh(
    args: StartDashboardRefreshCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartDashboardRefreshCommandOutput) => void
  ): void;
  startEventDataStoreIngestion(
    args: StartEventDataStoreIngestionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartEventDataStoreIngestionCommandOutput>;
  startEventDataStoreIngestion(
    args: StartEventDataStoreIngestionCommandInput,
    cb: (err: any, data?: StartEventDataStoreIngestionCommandOutput) => void
  ): void;
  startEventDataStoreIngestion(
    args: StartEventDataStoreIngestionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartEventDataStoreIngestionCommandOutput) => void
  ): void;
  startImport(): Promise<StartImportCommandOutput>;
  startImport(
    args: StartImportCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartImportCommandOutput>;
  startImport(
    args: StartImportCommandInput,
    cb: (err: any, data?: StartImportCommandOutput) => void
  ): void;
  startImport(
    args: StartImportCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartImportCommandOutput) => void
  ): void;
  startLogging(
    args: StartLoggingCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartLoggingCommandOutput>;
  startLogging(
    args: StartLoggingCommandInput,
    cb: (err: any, data?: StartLoggingCommandOutput) => void
  ): void;
  startLogging(
    args: StartLoggingCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartLoggingCommandOutput) => void
  ): void;
  startQuery(): Promise<StartQueryCommandOutput>;
  startQuery(
    args: StartQueryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartQueryCommandOutput>;
  startQuery(
    args: StartQueryCommandInput,
    cb: (err: any, data?: StartQueryCommandOutput) => void
  ): void;
  startQuery(
    args: StartQueryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartQueryCommandOutput) => void
  ): void;
  stopEventDataStoreIngestion(
    args: StopEventDataStoreIngestionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopEventDataStoreIngestionCommandOutput>;
  stopEventDataStoreIngestion(
    args: StopEventDataStoreIngestionCommandInput,
    cb: (err: any, data?: StopEventDataStoreIngestionCommandOutput) => void
  ): void;
  stopEventDataStoreIngestion(
    args: StopEventDataStoreIngestionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopEventDataStoreIngestionCommandOutput) => void
  ): void;
  stopImport(
    args: StopImportCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopImportCommandOutput>;
  stopImport(
    args: StopImportCommandInput,
    cb: (err: any, data?: StopImportCommandOutput) => void
  ): void;
  stopImport(
    args: StopImportCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopImportCommandOutput) => void
  ): void;
  stopLogging(
    args: StopLoggingCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopLoggingCommandOutput>;
  stopLogging(
    args: StopLoggingCommandInput,
    cb: (err: any, data?: StopLoggingCommandOutput) => void
  ): void;
  stopLogging(
    args: StopLoggingCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopLoggingCommandOutput) => void
  ): void;
  updateChannel(
    args: UpdateChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateChannelCommandOutput>;
  updateChannel(
    args: UpdateChannelCommandInput,
    cb: (err: any, data?: UpdateChannelCommandOutput) => void
  ): void;
  updateChannel(
    args: UpdateChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateChannelCommandOutput) => void
  ): void;
  updateDashboard(
    args: UpdateDashboardCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateDashboardCommandOutput>;
  updateDashboard(
    args: UpdateDashboardCommandInput,
    cb: (err: any, data?: UpdateDashboardCommandOutput) => void
  ): void;
  updateDashboard(
    args: UpdateDashboardCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateDashboardCommandOutput) => void
  ): void;
  updateEventDataStore(
    args: UpdateEventDataStoreCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateEventDataStoreCommandOutput>;
  updateEventDataStore(
    args: UpdateEventDataStoreCommandInput,
    cb: (err: any, data?: UpdateEventDataStoreCommandOutput) => void
  ): void;
  updateEventDataStore(
    args: UpdateEventDataStoreCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateEventDataStoreCommandOutput) => void
  ): void;
  updateTrail(
    args: UpdateTrailCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateTrailCommandOutput>;
  updateTrail(
    args: UpdateTrailCommandInput,
    cb: (err: any, data?: UpdateTrailCommandOutput) => void
  ): void;
  updateTrail(
    args: UpdateTrailCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateTrailCommandOutput) => void
  ): void;
}
export declare class CloudTrail
  extends CloudTrailClient
  implements CloudTrail {}
