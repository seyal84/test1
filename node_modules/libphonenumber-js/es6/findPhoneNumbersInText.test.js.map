{"version":3,"file":"findPhoneNumbersInText.test.js","names":["findPhoneNumbersInText","metadata","type","metadataMax","findPhoneNumbersInTextWithResults","input","options","results","map","result","startsAt","endsAt","number","data","phone","nationalNumber","country","ext","describe","it","expect","to","equal","defaultCountry","undefined","NUMBERS","i","length","defaultCallingCode","deep","leniency","phoneNumbers","v2","countryCallingCode","thrower","numbers","possibleNumbers","extended"],"sources":["../source/findPhoneNumbersInText.test.js"],"sourcesContent":["import findPhoneNumbersInText from './findPhoneNumbersInText.js'\r\nimport metadata from '../metadata.min.json' with { type: 'json' }\r\nimport metadataMax from '../metadata.max.json' with { type: 'json' }\r\n\r\nfunction findPhoneNumbersInTextWithResults(input, options, metadata) {\r\n\tconst results = findPhoneNumbersInText(input, options, metadata)\r\n\treturn results.map((result) => {\r\n\t\tconst { startsAt, endsAt, number } = result\r\n\t\tconst data = {\r\n\t\t\tphone: number.nationalNumber,\r\n\t\t\tstartsAt,\r\n\t\t\tendsAt\r\n\t\t}\r\n\t\tif (number.country) {\r\n\t\t\tdata.country = number.country\r\n\t\t}\r\n\t\tif (number.ext) {\r\n\t\t\tdata.ext = number.ext\r\n\t\t}\r\n\t\treturn data\r\n\t})\r\n}\r\n\r\ndescribe('findPhoneNumbersInText', () => {\r\n\tit('should find phone numbers in text (with default country)', () => {\r\n\t\texpect(\r\n            findPhoneNumbersInText('+7 (800) 555-35-35', 'US', metadata)[0].number.number\r\n        ).to.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (with default country in options)', () => {\r\n\t\texpect(\r\n            findPhoneNumbersInText('+7 (800) 555-35-35', { defaultCountry: 'US' }, metadata)[0].number.number\r\n        ).to.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (with default country and options)', () => {\r\n\t\texpect(\r\n            findPhoneNumbersInText('+7 (800) 555-35-35', 'US', {}, metadata)[0].number.number\r\n        ).to.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (without default country, with options)', () => {\r\n\t\texpect(\r\n            findPhoneNumbersInText('+7 (800) 555-35-35', undefined, {}, metadata)[0].number.number\r\n        ).to.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (with default country, without options)', () => {\r\n\t\texpect(\r\n            findPhoneNumbersInText('+7 (800) 555-35-35', 'US', undefined, metadata)[0].number.number\r\n        ).to.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text (with empty default country)', () => {\r\n\t\texpect(\r\n            findPhoneNumbersInText('+7 (800) 555-35-35', undefined, metadata)[0].number.number\r\n        ).to.equal('+78005553535')\r\n\t})\r\n\r\n\tit('should find phone numbers in text', () => {\r\n\t\tconst NUMBERS = ['+78005553535', '+12133734253']\r\n\t\tconst results = findPhoneNumbersInText('The number is +7 (800) 555-35-35 and not (213) 373-4253 as written in the document.', metadata)\r\n\t\tlet i = 0\r\n\t\twhile (i < results.length) {\r\n\t\t\texpect(results[i].number.number).to.equal(NUMBERS[i])\r\n\t\t\ti++\r\n\t\t}\r\n\t})\r\n\r\n\tit('should find phone numbers in text (default country calling code)', () => {\r\n\t\tconst NUMBERS = ['+870773111632']\r\n\t\tconst results = findPhoneNumbersInText('The number is 773 111 632', { defaultCallingCode: '870' }, metadata)\r\n\t\tlet i = 0\r\n\t\twhile (i < results.length) {\r\n\t\t\texpect(results[i].number.number).to.equal(NUMBERS[i])\r\n\t\t\ti++\r\n\t\t}\r\n\t})\r\n\r\n\tit('should find numbers', () => {\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('2133734253', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 10\r\n\t\t}])\r\n\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('(213) 373-4253', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 14\r\n\t\t}])\r\n\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('The number is +7 (800) 555-35-35 and not (213) 373-4253 as written in the document.', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}, {\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 41,\r\n\t\t\tendsAt   : 55\r\n\t\t}])\r\n\r\n\t\t// Opening parenthesis issue.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('The number is +7 (800) 555-35-35 and not (213) 373-4253 (that\\'s not even in the same country!) as written in the document.', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}, {\r\n\t\t\tphone    : '2133734253',\r\n\t\t\tcountry  : 'US',\r\n\t\t\tstartsAt : 41,\r\n\t\t\tendsAt   : 55\r\n\t\t}])\r\n\r\n\t\t// No default country.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('The number is +7 (800) 555-35-35 as written in the document.', undefined, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Passing `options` and default country.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('The number is +7 (800) 555-35-35 as written in the document.', { defaultCountry: 'US', leniency: 'VALID' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Passing `options`.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('The number is +7 (800) 555-35-35 as written in the document.', { leniency: 'VALID' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 32\r\n\t\t}])\r\n\r\n\t\t// Not a phone number and a phone number.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('Digits 12 are not a number, but +7 (800) 555-35-35 is.', { leniency: 'VALID' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\tstartsAt : 32,\r\n\t\t\tendsAt   : 50\r\n\t\t}])\r\n\r\n\t\t// Phone number extension.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('Date 02/17/2018 is not a number, but +7 (800) 555-35-35 ext. 123 is.', { leniency: 'VALID' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tphone    : '8005553535',\r\n\t\t\tcountry  : 'RU',\r\n\t\t\text      : '123',\r\n\t\t\tstartsAt : 37,\r\n\t\t\tendsAt   : 64\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should find numbers (v2)', () => {\r\n\t\tconst phoneNumbers = findPhoneNumbersInText('The number is +7 (800) 555-35-35 ext. 1234 and not (213) 373-4253 as written in the document.', { defaultCountry: 'US', v2: true }, metadata)\r\n\r\n\t\texpect(phoneNumbers.length).to.equal(2)\r\n\r\n\t\texpect(phoneNumbers[0].startsAt).to.equal(14)\r\n\t\texpect(phoneNumbers[0].endsAt).to.equal(42)\r\n\r\n\t\texpect(phoneNumbers[0].number.number).to.equal('+78005553535')\r\n\t\texpect(phoneNumbers[0].number.nationalNumber).to.equal('8005553535')\r\n\t\texpect(phoneNumbers[0].number.country).to.equal('RU')\r\n\t\texpect(phoneNumbers[0].number.countryCallingCode).to.equal('7')\r\n\t\texpect(phoneNumbers[0].number.ext).to.equal('1234')\r\n\r\n\t\texpect(phoneNumbers[1].startsAt).to.equal(51)\r\n\t\texpect(phoneNumbers[1].endsAt).to.equal(65)\r\n\r\n\t\texpect(phoneNumbers[1].number.number).to.equal('+12133734253')\r\n\t\texpect(phoneNumbers[1].number.nationalNumber).to.equal('2133734253')\r\n\t\texpect(phoneNumbers[1].number.country).to.equal('US')\r\n\t\texpect(phoneNumbers[1].number.countryCallingCode).to.equal('1')\r\n\t})\r\n\r\n\tit('shouldn\\'t find non-valid numbers', () => {\r\n\t\t// Not a valid phone number for US.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('1111111111', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([])\r\n\t})\r\n\r\n\tit('should find non-European digits', () => {\r\n\t\t// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('العَرَبِيَّة‎ +٤٤٣٣٣٣٣٣٣٣٣٣عَرَبِيّ‎', undefined, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tcountry  : 'GB',\r\n\t\t\tphone    : '3333333333',\r\n\t\t\tstartsAt : 14,\r\n\t\t\tendsAt   : 27\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\tlet thrower\r\n\r\n\t\t// No input\r\n\t\texpect(findPhoneNumbersInTextWithResults('', undefined, metadata)).to.deep.equal([])\r\n\r\n\t\t// // No country metadata for this `require` country code\r\n\t\t// thrower = () => findPhoneNumbersInTextWithResults('123', { defaultCountry: 'ZZ' }, metadata)\r\n\t\t// thrower.should.throw('Unknown country')\r\n\r\n\t\t// Numerical `value`\r\n\t\tthrower = () => findPhoneNumbersInTextWithResults(2141111111, { defaultCountry: 'US' })\r\n\t\texpect(thrower).to.throw('A text for parsing must be a string.')\r\n\r\n\t\t// // No metadata\r\n\t\t// thrower = () => findPhoneNumbersInTextWithResults('')\r\n\t\t// thrower.should.throw('`metadata` argument not passed')\r\n\r\n\t\t// No metadata, no default country, no phone numbers.\r\n\t\texpect(findPhoneNumbersInTextWithResults('')).to.deep.equal([])\r\n\t})\r\n\r\n\tit('should find international numbers when passed a non-existent default country', () => {\r\n\t\tconst numbers = findPhoneNumbersInText('Phone: +7 (800) 555 35 35. National: 8 (800) 555-55-55', { defaultCountry: 'XX', v2: true }, metadata)\r\n\t\texpect(numbers.length).to.equal(1)\r\n\t\texpect(numbers[0].number.nationalNumber).to.equal('8005553535')\r\n\t})\r\n\r\n\tit('shouldn\\'t find phone numbers which are not phone numbers', () => {\r\n\t\t// A timestamp.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('2012-01-02 08:00', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([])\r\n\r\n\t\t// A valid number (not a complete timestamp).\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('2012-01-02 08', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tcountry  : 'US',\r\n\t\t\tphone    : '2012010208',\r\n\t\t\tstartsAt : 0,\r\n\t\t\tendsAt   : 13\r\n\t\t}])\r\n\r\n\t\t// Invalid parens.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('213(3734253', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([])\r\n\r\n\t\t// Letters after phone number.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('2133734253a', { defaultCountry: 'US' }, metadata)\r\n        ).to.deep.equal([])\r\n\r\n\t\t// Valid phone (same as the one found in the UUID below).\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('The phone number is 231354125.', { defaultCountry: 'FR' }, metadata)\r\n        ).to.deep.equal([{\r\n\t\t\tcountry  : 'FR',\r\n\t\t\tphone    : '231354125',\r\n\t\t\tstartsAt : 20,\r\n\t\t\tendsAt   : 29\r\n\t\t}])\r\n\r\n\t\t// Not a phone number (part of a UUID).\r\n\t\t// Should parse in `{ extended: true }` mode.\r\n\t\tconst possibleNumbers = findPhoneNumbersInTextWithResults('The UUID is CA801c26f98cd16e231354125ad046e40b.', { defaultCountry: 'FR', extended: true }, metadata)\r\n\t\texpect(possibleNumbers.length).to.equal(1)\r\n\t\texpect(possibleNumbers[0].country).to.equal('FR')\r\n\t\texpect(possibleNumbers[0].phone).to.equal('231354125')\r\n\r\n\t\t// Not a phone number (part of a UUID).\r\n\t\t// Shouldn't parse by default.\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('The UUID is CA801c26f98cd16e231354125ad046e40b.', { defaultCountry: 'FR' }, metadata)\r\n        ).to.deep.equal([])\r\n\t})\r\n\r\n\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/merge_requests/4\r\n\tit('should return correct `startsAt` and `endsAt` when matching \"inner\" candidates in a could-be-a-candidate substring', () => {\r\n\t\texpect(\r\n            findPhoneNumbersInTextWithResults('39945926 77200596 16533084', { defaultCountry: 'ID' }, metadataMax)\r\n        ).to.deep.equal([{\r\n\t\t\t\tcountry: 'ID',\r\n\t\t\t\tphone: '77200596',\r\n\t\t\t\tstartsAt: 9,\r\n\t\t\t\tendsAt: 17\r\n\t\t\t}])\r\n\t})\r\n})"],"mappings":"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","ignoreList":[]}