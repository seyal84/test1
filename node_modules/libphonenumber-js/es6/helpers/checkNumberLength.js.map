{"version":3,"file":"checkNumberLength.js","names":["mergeArrays","checkNumberLength","nationalNumber","metadata","checkNumberLengthForType","undefined","type","type_info","possible_lengths","possibleLengths","mobile_type","actual_length","length","minimum_length","indexOf"],"sources":["../../source/helpers/checkNumberLength.js"],"sourcesContent":["import mergeArrays from './mergeArrays.js'\r\n\r\nexport default function checkNumberLength(nationalNumber, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for the country based on its length.\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,kBAAkB;AAE1C,eAAe,SAASC,iBAAiBA,CAACC,cAAc,EAAEC,QAAQ,EAAE;EACnE,OAAOC,wBAAwB,CAACF,cAAc,EAAEG,SAAS,EAAEF,QAAQ,CAAC;AACrE;;AAEA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACF,cAAc,EAAEI,IAAI,EAAEH,QAAQ,EAAE;EACxE,IAAMI,SAAS,GAAGJ,QAAQ,CAACG,IAAI,CAACA,IAAI,CAAC;;EAErC;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIE,gBAAgB,GAAGD,SAAS,IAAIA,SAAS,CAACE,eAAe,CAAC,CAAC,IAAIN,QAAQ,CAACM,eAAe,CAAC,CAAC;EAC7F;;EAEA;EACA,IAAI,CAACD,gBAAgB,EAAE;IACtB,OAAO,aAAa;EACrB;EAEA,IAAIF,IAAI,KAAK,sBAAsB,EAAE;IACpC;IACA;IACA,IAAI,CAACH,QAAQ,CAACG,IAAI,CAAC,YAAY,CAAC,EAAE;MACjC;MACA;MACA,OAAOF,wBAAwB,CAACF,cAAc,EAAE,QAAQ,EAAEC,QAAQ,CAAC;IACpE;IAEA,IAAMO,WAAW,GAAGP,QAAQ,CAACG,IAAI,CAAC,QAAQ,CAAC;IAC3C,IAAII,WAAW,EAAE;MAChB;MACA;MACA;MACA;MACA;MACAF,gBAAgB,GAAGR,WAAW,CAACQ,gBAAgB,EAAEE,WAAW,CAACD,eAAe,CAAC,CAAC,CAAC;MAC/E;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;IACD;EACD;EACA;EAAA,KACK,IAAIH,IAAI,IAAI,CAACC,SAAS,EAAE;IAC5B,OAAO,gBAAgB;EACxB;EAEA,IAAMI,aAAa,GAAGT,cAAc,CAACU,MAAM;;EAE3C;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAMC,cAAc,GAAGL,gBAAgB,CAAC,CAAC,CAAC;EAE1C,IAAIK,cAAc,KAAKF,aAAa,EAAE;IACrC,OAAO,aAAa;EACrB;EAEA,IAAIE,cAAc,GAAGF,aAAa,EAAE;IACnC,OAAO,WAAW;EACnB;EAEA,IAAIH,gBAAgB,CAACA,gBAAgB,CAACI,MAAM,GAAG,CAAC,CAAC,GAAGD,aAAa,EAAE;IAClE,OAAO,UAAU;EAClB;;EAEA;EACA,OAAOH,gBAAgB,CAACM,OAAO,CAACH,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,aAAa,GAAG,gBAAgB;AAC1F","ignoreList":[]}