{"version":3,"file":"parsePhoneNumber.test.js","names":["_parsePhoneNumber2","_interopRequireDefault","require","_metadataMin","e","__esModule","parsePhoneNumber","_len","arguments","length","parameters","Array","_key","push","metadata","_parsePhoneNumber","apply","USE_NON_GEOGRAPHIC_COUNTRY_CODE","describe","it","expect","nationalNumber","to","equal","be","undefined","phoneNumber","number","country","countryCallingCode","defaultCallingCode","isPossible","phoneNumber2","testCorrectness","expectedResult","result","extract","defaultCountry","not","isValid"],"sources":["../source/parsePhoneNumber.test.js"],"sourcesContent":["import _parsePhoneNumber from './parsePhoneNumber.js'\r\nimport metadata from '../metadata.min.json' with { type: 'json' }\r\n\r\nfunction parsePhoneNumber(...parameters) {\r\n\tparameters.push(metadata)\r\n\treturn _parsePhoneNumber.apply(this, parameters)\r\n}\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\ndescribe('parsePhoneNumber', () => {\r\n\tit('should parse phone numbers from string', () => {\r\n\t\texpect(parsePhoneNumber('Phone: 8 (800) 555 35 35.', 'RU').nationalNumber).to.equal('8005553535')\r\n\t\texpect(parsePhoneNumber('3', 'RU')).to.be.undefined\r\n\t})\r\n\r\n\tit('should work in edge cases', () => {\r\n\t\texpect(parsePhoneNumber('')).to.be.undefined\r\n\t})\r\n\r\n\tit('should parse phone numbers when invalid country code is passed', () => {\r\n\t\texpect(parsePhoneNumber('Phone: +7 (800) 555 35 35.', 'XX').nationalNumber).to.equal('8005553535')\r\n\t\texpect(parsePhoneNumber('Phone: 8 (800) 555-35-35.', 'XX')).to.be.undefined\r\n\t})\r\n\r\n\r\n\tit('should parse non-geographic numbering plan phone numbers (extended)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+870773111632')\r\n\t\texpect(phoneNumber.number).to.equal('+870773111632')\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\texpect(phoneNumber.country).to.equal('001')\r\n\t\t} else {\r\n\t\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\t}\r\n\t\texpect(phoneNumber.countryCallingCode).to.equal('870')\r\n\t})\r\n\r\n\tit('should parse non-geographic numbering plan phone numbers (default country code) (extended)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('773111632', { defaultCallingCode: '870' })\r\n\t\texpect(phoneNumber.number).to.equal('+870773111632')\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\texpect(phoneNumber.country).to.equal('001')\r\n\t\t} else {\r\n\t\t\texpect(phoneNumber.country).to.be.undefined\r\n\t\t}\r\n\t\texpect(phoneNumber.countryCallingCode).to.equal('870')\r\n\t})\r\n\r\n\tit('should determine the possibility of non-geographic phone numbers', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+870773111632')\r\n\t\texpect(phoneNumber.isPossible()).to.equal(true)\r\n\t\tconst phoneNumber2 = parsePhoneNumber('+8707731116321')\r\n\t\texpect(phoneNumber2.isPossible()).to.equal(false)\r\n\t})\r\n\r\n\tit('should support `extract: false` flag', () => {\r\n\t\tconst testCorrectness = (number, expectedResult) => {\r\n\t\t\tconst result = expect(parsePhoneNumber(number, { extract: false, defaultCountry: 'US' }))\r\n\t\t\tif (expectedResult) {\r\n\t\t\t\tresult.to.not.be.undefined\r\n\t\t\t} else {\r\n\t\t\t\tresult.to.be.undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\ttestCorrectness('Call: (213) 373-4253', false)\r\n\t\ttestCorrectness('(213) 373-4253x', false)\r\n\t\ttestCorrectness('(213) 373-4253', true)\r\n\t\ttestCorrectness('- (213) 373-4253 -', true)\r\n\t\ttestCorrectness('+1 (213) 373-4253', true)\r\n\t\ttestCorrectness(' +1 (213) 373-4253', false)\r\n\t})\r\n\r\n\tit('should not prematurely strip a possible national prefix from Chinese numbers', () => {\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\r\n\t\tconst phoneNumber = parsePhoneNumber('+86123456789')\r\n\t\texpect(phoneNumber.isPossible()).to.equal(true)\r\n\t\texpect(phoneNumber.isValid()).to.equal(false)\r\n\t\texpect(phoneNumber.nationalNumber).to.equal('123456789')\r\n\t})\r\n})\r\n"],"mappings":"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","ignoreList":[]}