{"version":3,"file":"isPossible.js","names":["Metadata","checkNumberLength","isPossiblePhoneNumber","input","options","metadata","undefined","v2","countryCallingCode","Error","selectNumberingPlan","phone","country","hasCountry","concat","possibleLengths","isPossibleNumber","nationalNumber","isNonGeographicCallingCode"],"sources":["../source/isPossible.js"],"sourcesContent":["import Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input â€” If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\t// Old metadata (< 1.0.18) had no \"possible length\" data.\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,OAAOC,iBAAiB,MAAM,gCAAgC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,qBAAqBA,CAACC,KAAK,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACvE;EACA,IAAID,OAAO,KAAKE,SAAS,EAAE;IAC1BF,OAAO,GAAG,CAAC,CAAC;EACb;EAEAC,QAAQ,GAAG,IAAIL,QAAQ,CAACK,QAAQ,CAAC;EAEjC,IAAID,OAAO,CAACG,EAAE,EAAE;IACf,IAAI,CAACJ,KAAK,CAACK,kBAAkB,EAAE;MAC9B,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;IACtD;IACAJ,QAAQ,CAACK,mBAAmB,CAACP,KAAK,CAACK,kBAAkB,CAAC;EACvD,CAAC,MAAM;IACN,IAAI,CAACL,KAAK,CAACQ,KAAK,EAAE;MACjB,OAAO,KAAK;IACb;IACA,IAAIR,KAAK,CAACS,OAAO,EAAE;MAClB,IAAI,CAACP,QAAQ,CAACQ,UAAU,CAACV,KAAK,CAACS,OAAO,CAAC,EAAE;QACxC,MAAM,IAAIH,KAAK,qBAAAK,MAAA,CAAqBX,KAAK,CAACS,OAAO,CAAE,CAAC;MACrD;MACAP,QAAQ,CAACO,OAAO,CAACT,KAAK,CAACS,OAAO,CAAC;IAChC,CAAC,MAAM;MACN,IAAI,CAACT,KAAK,CAACK,kBAAkB,EAAE;QAC9B,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MACtD;MACAJ,QAAQ,CAACK,mBAAmB,CAACP,KAAK,CAACK,kBAAkB,CAAC;IACvD;EACD;;EAEA;EACA,IAAIH,QAAQ,CAACU,eAAe,CAAC,CAAC,EAAE;IAC/B,OAAOC,gBAAgB,CAACb,KAAK,CAACQ,KAAK,IAAIR,KAAK,CAACc,cAAc,EAAEZ,QAAQ,CAAC;EACvE,CAAC,MAAM;IACN;IACA;IACA;IACA;IACA;IACA;IACA,IAAIF,KAAK,CAACK,kBAAkB,IAAIH,QAAQ,CAACa,0BAA0B,CAACf,KAAK,CAACK,kBAAkB,CAAC,EAAE;MAC9F;MACA;MACA,OAAO,IAAI;IACZ,CAAC,MAAM;MACN,MAAM,IAAIC,KAAK,CAAC,gGAAgG,CAAC;IAClH;EACD;AACD;AAEA,OAAO,SAASO,gBAAgBA,CAACC,cAAc,EAAEZ,QAAQ,EAAE;EAAE;EAC5D,QAAQJ,iBAAiB,CAACgB,cAAc,EAAEZ,QAAQ,CAAC;IAClD,KAAK,aAAa;MACjB,OAAO,IAAI;IACZ;IACA;IACA;IACA;IACA;MACC,OAAO,KAAK;EACd;AACD","ignoreList":[]}